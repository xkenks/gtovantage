"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/subscription/page",{

/***/ "(app-pages-browser)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ useAuth,AuthProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useAuth = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// マスターユーザーのメールアドレスリスト\nconst MASTER_USER_EMAILS = [\n    \"admin@gtovantage.com\",\n    \"master@gtovantage.com\"\n];\n// マスターアカウントの初期パスワード（本番環境では変更が必要）\nconst MASTER_PASSWORD = \"master123456\";\n// 簡単なハッシュ関数（本番環境ではbcrypt等を使用）\nconst simpleHash = (str)=>{\n    let hash = 0;\n    for(let i = 0; i < str.length; i++){\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString();\n};\n// メール確認トークンを生成する関数\nconst generateVerificationToken = ()=>{\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\n// マスターアカウントを初期化する関数\nconst initializeMasterAccounts = ()=>{\n    const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n    let updated = false;\n    MASTER_USER_EMAILS.forEach((email)=>{\n        const existingUser = users.find((u)=>u.email === email);\n        if (!existingUser) {\n            const masterUser = {\n                id: \"master-\".concat(Date.now(), \"-\").concat(Math.random()),\n                email,\n                name: email === \"master@gtovantage.com\" ? \"Master User\" : \"Admin User\",\n                password: simpleHash(MASTER_PASSWORD),\n                createdAt: new Date().toISOString(),\n                emailVerified: true,\n                isMasterUser: true,\n                subscriptionStatus: \"master\",\n                subscriptionExpiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).toISOString(),\n                practiceCount: 0,\n                lastPracticeDate: new Date().toISOString()\n            };\n            users.push(masterUser);\n            updated = true;\n            console.log(\"マスターアカウントを作成しました: \".concat(email));\n        }\n    });\n    if (updated) {\n        localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n    }\n};\nconst AuthProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // 初期化時にマスターアカウントを確認・作成\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        initializeMasterAccounts();\n        const savedUser = localStorage.getItem(\"gto-vantage-user\");\n        if (savedUser) {\n            try {\n                const parsedUser = JSON.parse(savedUser);\n                var _parsedUser_emailVerified, _parsedUser_isMasterUser, _parsedUser_subscriptionStatus;\n                // 古いユーザーデータの場合は新しい形式に変換\n                const updatedUser = {\n                    ...parsedUser,\n                    emailVerified: (_parsedUser_emailVerified = parsedUser.emailVerified) !== null && _parsedUser_emailVerified !== void 0 ? _parsedUser_emailVerified : false,\n                    isMasterUser: (_parsedUser_isMasterUser = parsedUser.isMasterUser) !== null && _parsedUser_isMasterUser !== void 0 ? _parsedUser_isMasterUser : MASTER_USER_EMAILS.includes(parsedUser.email),\n                    subscriptionStatus: (_parsedUser_subscriptionStatus = parsedUser.subscriptionStatus) !== null && _parsedUser_subscriptionStatus !== void 0 ? _parsedUser_subscriptionStatus : \"free\",\n                    subscriptionExpiresAt: parsedUser.subscriptionExpiresAt\n                };\n                setUser(updatedUser);\n                localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            } catch (error) {\n                console.error(\"Failed to parse saved user:\", error);\n                localStorage.removeItem(\"gto-vantage-user\");\n            }\n        }\n        setIsLoading(false);\n    }, []);\n    // ユーザーが設定された後に練習回数をリセット\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (user) {\n            resetPracticeCountIfNewDay();\n        }\n    }, [\n        user\n    ]);\n    const register = async (email, password, name)=>{\n        try {\n            // 既存ユーザーのチェック\n            const existingUsers = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const existingUser = existingUsers.find((u)=>u.email === email);\n            if (existingUser) {\n                throw new Error(\"このメールアドレスは既に登録されています\");\n            }\n            // マスターユーザーかどうかをチェック\n            const isMasterUser = MASTER_USER_EMAILS.includes(email);\n            const verificationToken = generateVerificationToken();\n            const newUser = {\n                id: \"user-\".concat(Date.now(), \"-\").concat(Math.random()),\n                email,\n                name,\n                password: simpleHash(password),\n                createdAt: new Date().toISOString(),\n                emailVerified: isMasterUser,\n                verificationToken: isMasterUser ? undefined : verificationToken,\n                isMasterUser,\n                subscriptionStatus: isMasterUser ? \"master\" : \"free\",\n                subscriptionExpiresAt: isMasterUser ? new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).toISOString() : undefined,\n                practiceCount: 0,\n                lastPracticeDate: new Date().toISOString()\n            };\n            existingUsers.push(newUser);\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(existingUsers));\n            // マスターユーザーでない場合はメール確認を送信\n            if (!isMasterUser) {\n                try {\n                    const response = await fetch(\"/api/auth/send-verification-email\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            email,\n                            token: verificationToken,\n                            name\n                        })\n                    });\n                    if (!response.ok) {\n                        console.error(\"Failed to send verification email\");\n                    } else {\n                        console.log(\"Verification email sent successfully to:\", email);\n                    }\n                } catch (error) {\n                    console.error(\"Error sending verification email:\", error);\n                }\n            }\n            const { password: _, ...userWithoutPassword } = newUser;\n            setUser(userWithoutPassword);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(userWithoutPassword));\n            return true;\n        } catch (error) {\n            console.error(\"Registration failed:\", error);\n            throw error;\n        }\n    };\n    const login = async (email, password)=>{\n        try {\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const hashedPassword = simpleHash(password);\n            const user = users.find((u)=>u.email === email && u.password === hashedPassword);\n            if (!user) {\n                throw new Error(\"メールアドレスまたはパスワードが正しくありません\");\n            }\n            const { password: _, ...userWithoutPassword } = user;\n            // マスターユーザーの場合は自動的にメール確認済みにする\n            if (MASTER_USER_EMAILS.includes(email) && !userWithoutPassword.emailVerified) {\n                userWithoutPassword.emailVerified = true;\n                userWithoutPassword.isMasterUser = true;\n                userWithoutPassword.subscriptionStatus = \"master\";\n                userWithoutPassword.subscriptionExpiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).toISOString();\n                // ユーザーリストを更新\n                const updatedUsers = users.map((u)=>u.email === email ? {\n                        ...u,\n                        ...userWithoutPassword\n                    } : u);\n                localStorage.setItem(\"gto-vantage-users\", JSON.stringify(updatedUsers));\n            }\n            setUser(userWithoutPassword);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(userWithoutPassword));\n            return true;\n        } catch (error) {\n            console.error(\"Login failed:\", error);\n            return false;\n        }\n    };\n    const logout = ()=>{\n        setUser(null);\n        localStorage.removeItem(\"gto-vantage-user\");\n    };\n    const verifyEmail = async (token)=>{\n        try {\n            if (!user) return false;\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const userIndex = users.findIndex((u)=>u.email === user.email);\n            if (userIndex === -1) return false;\n            const currentUser = users[userIndex];\n            if (currentUser.verificationToken !== token) return false;\n            // メール確認を完了\n            const updatedUser = {\n                ...user,\n                emailVerified: true,\n                verificationToken: undefined\n            };\n            // ユーザーリストを更新\n            users[userIndex] = {\n                ...currentUser,\n                emailVerified: true,\n                verificationToken: undefined\n            };\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n            // 現在のユーザーを更新\n            setUser(updatedUser);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            return true;\n        } catch (error) {\n            console.error(\"Email verification failed:\", error);\n            return false;\n        }\n    };\n    const resendVerificationEmail = async (email)=>{\n        try {\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const userIndex = users.findIndex((u)=>u.email === email);\n            if (userIndex === -1) return false;\n            const newToken = generateVerificationToken();\n            users[userIndex].verificationToken = newToken;\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n            // 現在のユーザーも更新\n            if (user && user.email === email) {\n                const updatedUser = {\n                    ...user,\n                    verificationToken: newToken\n                };\n                setUser(updatedUser);\n                localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            }\n            // メール確認メールを再送信\n            try {\n                const response = await fetch(\"/api/auth/send-verification-email\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        email,\n                        token: newToken,\n                        name: users[userIndex].name\n                    })\n                });\n                if (!response.ok) {\n                    console.error(\"Failed to resend verification email\");\n                    return false;\n                } else {\n                    console.log(\"Verification email resent successfully to:\", email);\n                    return true;\n                }\n            } catch (error) {\n                console.error(\"Error resending verification email:\", error);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Resend verification email failed:\", error);\n            return false;\n        }\n    };\n    // 練習回数管理\n    const getMaxPracticeCount = (subscriptionStatus)=>{\n        switch(subscriptionStatus){\n            case \"free\":\n                return 5;\n            case \"light\":\n                return 50;\n            case \"premium\":\n            case \"master\":\n                return Infinity;\n            default:\n                return 5;\n        }\n    };\n    const resetPracticeCountIfNewDay = ()=>{\n        if (!user) return;\n        const today = new Date().toDateString();\n        const lastPracticeDate = user.lastPracticeDate ? new Date(user.lastPracticeDate).toDateString() : null;\n        if (lastPracticeDate !== today) {\n            const updatedUser = {\n                ...user,\n                practiceCount: 0,\n                lastPracticeDate: new Date().toISOString()\n            };\n            setUser(updatedUser);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            // ユーザーリストも更新\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const userIndex = users.findIndex((u)=>u.email === user.email);\n            if (userIndex !== -1) {\n                users[userIndex] = updatedUser;\n                localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n            }\n        }\n    };\n    const incrementPracticeCount = ()=>{\n        if (!user) return;\n        resetPracticeCountIfNewDay();\n        const currentCount = user.practiceCount || 0;\n        const updatedUser = {\n            ...user,\n            practiceCount: currentCount + 1\n        };\n        setUser(updatedUser);\n        localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n        // ユーザーリストも更新\n        const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n        const userIndex = users.findIndex((u)=>u.email === user.email);\n        if (userIndex !== -1) {\n            users[userIndex] = updatedUser;\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n        }\n    };\n    const isAuthenticated = !!user;\n    const isEmailVerified = Boolean(user === null || user === void 0 ? void 0 : user.emailVerified);\n    const isMasterUser = Boolean(user === null || user === void 0 ? void 0 : user.isMasterUser);\n    const hasActiveSubscription = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"premium\" || (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"master\" || Boolean((user === null || user === void 0 ? void 0 : user.subscriptionExpiresAt) && new Date(user.subscriptionExpiresAt) > new Date());\n    // 練習制限チェック\n    const maxPracticeCount = getMaxPracticeCount((user === null || user === void 0 ? void 0 : user.subscriptionStatus) || \"free\");\n    const practiceCount = (user === null || user === void 0 ? void 0 : user.practiceCount) || 0;\n    const canPractice = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"premium\" || (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"master\" || practiceCount < maxPracticeCount;\n    // スタックサイズ制限機能\n    const canUseStackSize = (stackSize)=>{\n        const subscriptionStatus = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) || \"free\";\n        if (subscriptionStatus === \"premium\" || subscriptionStatus === \"master\") {\n            return true; // プレミアム・マスターは全スタックサイズ使用可能\n        }\n        if (subscriptionStatus === \"light\") {\n            return true; // ライトプランも全スタックサイズ使用可能\n        }\n        // 無料プランは30BBのみ\n        return stackSize === \"30BB\";\n    };\n    const getAllowedStackSizes = ()=>{\n        const subscriptionStatus = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) || \"free\";\n        if (subscriptionStatus === \"premium\" || subscriptionStatus === \"master\" || subscriptionStatus === \"light\") {\n            return [\n                \"10BB\",\n                \"15BB\",\n                \"20BB\",\n                \"30BB\",\n                \"40BB\",\n                \"50BB\",\n                \"75BB\"\n            ]; // 全スタックサイズ\n        }\n        return [\n            \"30BB\"\n        ]; // 無料プランは30BBのみ\n    };\n    const value = {\n        user,\n        isLoading,\n        register,\n        login,\n        logout,\n        isAuthenticated,\n        verifyEmail,\n        resendVerificationEmail,\n        isEmailVerified,\n        isMasterUser,\n        hasActiveSubscription,\n        canPractice,\n        practiceCount,\n        maxPracticeCount,\n        incrementPracticeCount,\n        canUseStackSize,\n        getAllowedStackSizes\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/kensuke/Desktop/gtovantage/src/contexts/AuthContext.tsx\",\n        lineNumber: 444,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(AuthProvider, \"l8KTfcQ0b0tPgqlKoCac6dKortU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0cy9BdXRoQ29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUU4RTtBQW9DOUUsTUFBTUssNEJBQWNKLG9EQUFhQSxDQUE4Qks7QUFFeEQsTUFBTUMsVUFBVTs7SUFDckIsTUFBTUMsVUFBVU4saURBQVVBLENBQUNHO0lBQzNCLElBQUlHLFlBQVlGLFdBQVc7UUFDekIsTUFBTSxJQUFJRyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVCxFQUFFO0dBTldEO0FBUWIsc0JBQXNCO0FBQ3RCLE1BQU1HLHFCQUFxQjtJQUN6QjtJQUNBO0NBQ0Q7QUFFRCxpQ0FBaUM7QUFDakMsTUFBTUMsa0JBQWtCO0FBRXhCLDhCQUE4QjtBQUM5QixNQUFNQyxhQUFhLENBQUNDO0lBQ2xCLElBQUlDLE9BQU87SUFDWCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsSUFBSUcsTUFBTSxFQUFFRCxJQUFLO1FBQ25DLE1BQU1FLE9BQU9KLElBQUlLLFVBQVUsQ0FBQ0g7UUFDNUJELE9BQU8sQ0FBRUEsUUFBUSxLQUFLQSxPQUFRRztRQUM5QkgsT0FBT0EsT0FBT0EsTUFBTSwyQkFBMkI7SUFDakQ7SUFDQSxPQUFPQSxLQUFLSyxRQUFRO0FBQ3RCO0FBRUEsbUJBQW1CO0FBQ25CLE1BQU1DLDRCQUE0QjtJQUNoQyxPQUFPQyxLQUFLQyxNQUFNLEdBQUdILFFBQVEsQ0FBQyxJQUFJSSxTQUFTLENBQUMsR0FBRyxNQUFNRixLQUFLQyxNQUFNLEdBQUdILFFBQVEsQ0FBQyxJQUFJSSxTQUFTLENBQUMsR0FBRztBQUMvRjtBQUVBLG9CQUFvQjtBQUNwQixNQUFNQywyQkFBMkI7SUFDL0IsTUFBTUMsUUFBUUMsS0FBS0MsS0FBSyxDQUFDQyxhQUFhQyxPQUFPLENBQUMsd0JBQXdCO0lBQ3RFLElBQUlDLFVBQVU7SUFFZHBCLG1CQUFtQnFCLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDekIsTUFBTUMsZUFBZVIsTUFBTVMsSUFB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LENBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTVgsa0JBQWtCLE1BQUssWUFDN0JFLGdCQUFnQnNEO0lBRW5DLGNBQWM7SUFDZCxNQUFNRSxrQkFBa0IsQ0FBQ0M7UUFDdkIsTUFBTTNELHFCQUFxQlcsQ0FBQUEsaUJBQUFBLDJCQUFBQSxLQUFNWCxrQkFBa0IsS0FBSTtRQUN2RCxJQUFJQSx1QkFBdUIsYUFBYUEsdUJBQXVCLFVBQVU7WUFDdkUsT0FBTyxNQUFNLDBCQUEwQjtRQUN6QztRQUNBLElBQUlBLHVCQUF1QixTQUFTO1lBQ2xDLE9BQU8sTUFBTSxzQkFBc0I7UUFDckM7UUFDQSxlQUFlO1FBQ2YsT0FBTzJELGNBQWM7SUFDdkI7SUFFQSxNQUFNQyx1QkFBdUI7UUFDM0IsTUFBTTVELHFCQUFxQlcsQ0FBQUEsaUJBQUFBLDJCQUFBQSxLQUFNWCxrQkFBa0IsS0FBSTtRQUN2RCxJQUFJQSx1QkFBdUIsYUFBYUEsdUJBQXVCLFlBQVlBLHVCQUF1QixTQUFTO1lBQ3pHLE9BQU87Z0JBQUM7Z0JBQVE7Z0JBQVE7Z0JBQVE7Z0JBQVE7Z0JBQVE7Z0JBQVE7YUFBTyxFQUFFLFdBQVc7UUFDOUU7UUFDQSxPQUFPO1lBQUM7U0FBTyxFQUFFLGVBQWU7SUFDbEM7SUFFQSxNQUFNNkQsUUFBeUI7UUFDN0JsRDtRQUNBRTtRQUNBUztRQUNBYTtRQUNBSTtRQUNBYTtRQUNBWjtRQUNBSTtRQUNBUztRQUNBdEQ7UUFDQXdEO1FBQ0FFO1FBQ0F2RDtRQUNBc0Q7UUFDQU47UUFDQVE7UUFDQUU7SUFDRjtJQUVBLHFCQUNFLDhEQUFDckcsWUFBWXVHLFFBQVE7UUFBQ0QsT0FBT0E7a0JBQzFCbkQ7Ozs7OztBQUdQLEVBQUU7SUF0VldEO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb250ZXh0cy9BdXRoQ29udGV4dC50c3g/MWZhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgVXNlciB7XG4gIGlkOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIGVtYWlsVmVyaWZpZWQ6IGJvb2xlYW47XG4gIHZlcmlmaWNhdGlvblRva2VuPzogc3RyaW5nO1xuICBpc01hc3RlclVzZXI6IGJvb2xlYW47XG4gIHN1YnNjcmlwdGlvblN0YXR1czogJ2ZyZWUnIHwgJ2xpZ2h0JyB8ICdwcmVtaXVtJyB8ICdtYXN0ZXInO1xuICBzdWJzY3JpcHRpb25FeHBpcmVzQXQ/OiBzdHJpbmc7XG4gIHByYWN0aWNlQ291bnQ/OiBudW1iZXI7XG4gIGxhc3RQcmFjdGljZURhdGU/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBBdXRoQ29udGV4dFR5cGUge1xuICB1c2VyOiBVc2VyIHwgbnVsbDtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICByZWdpc3RlcjogKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcsIG5hbWU6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgbG9naW46IChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xuICBsb2dvdXQ6ICgpID0+IHZvaWQ7XG4gIGlzQXV0aGVudGljYXRlZDogYm9vbGVhbjtcbiAgdmVyaWZ5RW1haWw6ICh0b2tlbjogc3RyaW5nKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xuICByZXNlbmRWZXJpZmljYXRpb25FbWFpbDogKGVtYWlsOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gIGlzRW1haWxWZXJpZmllZDogYm9vbGVhbjtcbiAgaXNNYXN0ZXJVc2VyOiBib29sZWFuO1xuICBoYXNBY3RpdmVTdWJzY3JpcHRpb246IGJvb2xlYW47XG4gIGNhblByYWN0aWNlOiBib29sZWFuO1xuICBwcmFjdGljZUNvdW50OiBudW1iZXI7XG4gIG1heFByYWN0aWNlQ291bnQ6IG51bWJlcjtcbiAgaW5jcmVtZW50UHJhY3RpY2VDb3VudDogKCkgPT4gdm9pZDtcbiAgY2FuVXNlU3RhY2tTaXplOiAoc3RhY2tTaXplOiBzdHJpbmcpID0+IGJvb2xlYW47XG4gIGdldEFsbG93ZWRTdGFja1NpemVzOiAoKSA9PiBzdHJpbmdbXTtcbn1cblxuY29uc3QgQXV0aENvbnRleHQgPSBjcmVhdGVDb250ZXh0PEF1dGhDb250ZXh0VHlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblxuZXhwb3J0IGNvbnN0IHVzZUF1dGggPSAoKSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KEF1dGhDb250ZXh0KTtcbiAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlQXV0aCBtdXN0IGJlIHVzZWQgd2l0aGluIGFuIEF1dGhQcm92aWRlcicpO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxuLy8g44Oe44K544K/44O844Om44O844K244O844Gu44Oh44O844Or44Ki44OJ44Os44K544Oq44K544OIXG5jb25zdCBNQVNURVJfVVNFUl9FTUFJTFMgPSBbXG4gICdhZG1pbkBndG92YW50YWdlLmNvbScsXG4gICdtYXN0ZXJAZ3RvdmFudGFnZS5jb20nXG5dO1xuXG4vLyDjg57jgrnjgr/jg7zjgqLjgqvjgqbjg7Pjg4jjga7liJ3mnJ/jg5Hjgrnjg6/jg7zjg4nvvIjmnKznlarnkrDlooPjgafjga/lpInmm7TjgYzlv4XopoHvvIlcbmNvbnN0IE1BU1RFUl9QQVNTV09SRCA9ICdtYXN0ZXIxMjM0NTYnO1xuXG4vLyDnsKHljZjjgarjg4/jg4Pjgrfjg6XplqLmlbDvvIjmnKznlarnkrDlooPjgafjga9iY3J5cHTnrYnjgpLkvb/nlKjvvIlcbmNvbnN0IHNpbXBsZUhhc2ggPSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBsZXQgaGFzaCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNoYXI7XG4gICAgaGFzaCA9IGhhc2ggJiBoYXNoOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gaGFzaC50b1N0cmluZygpO1xufTtcblxuLy8g44Oh44O844Or56K66KqN44OI44O844Kv44Oz44KS55Sf5oiQ44GZ44KL6Zai5pWwXG5jb25zdCBnZW5lcmF0ZVZlcmlmaWNhdGlvblRva2VuID0gKCk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KTtcbn07XG5cbi8vIOODnuOCueOCv+ODvOOCouOCq+OCpuODs+ODiOOCkuWIneacn+WMluOBmeOCi+mWouaVsFxuY29uc3QgaW5pdGlhbGl6ZU1hc3RlckFjY291bnRzID0gKCkgPT4ge1xuICBjb25zdCB1c2VycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2d0by12YW50YWdlLXVzZXJzJykgfHwgJ1tdJyk7XG4gIGxldCB1cGRhdGVkID0gZmFsc2U7XG5cbiAgTUFTVEVSX1VTRVJfRU1BSUxTLmZvckVhY2goZW1haWwgPT4ge1xuICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IHVzZXJzLmZpbmQoKHU6IGFueSkgPT4gdS5lbWFpbCA9PT0gZW1haWwpO1xuICAgIGlmICghZXhpc3RpbmdVc2VyKSB7XG4gICAgICBjb25zdCBtYXN0ZXJVc2VyID0ge1xuICAgICAgICBpZDogYG1hc3Rlci0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKX1gLFxuICAgICAgICBlbWFpbCxcbiAgICAgICAgbmFtZTogZW1haWwgPT09ICdtYXN0ZXJAZ3RvdmFudGFnZS5jb20nID8gJ01hc3RlciBVc2VyJyA6ICdBZG1pbiBVc2VyJyxcbiAgICAgICAgcGFzc3dvcmQ6IHNpbXBsZUhhc2goTUFTVEVSX1BBU1NXT1JEKSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGVtYWlsVmVyaWZpZWQ6IHRydWUsXG4gICAgICAgIGlzTWFzdGVyVXNlcjogdHJ1ZSxcbiAgICAgICAgc3Vic2NyaXB0aW9uU3RhdHVzOiAnbWFzdGVyJyBhcyBjb25zdCxcbiAgICAgICAgc3Vic2NyaXB0aW9uRXhwaXJlc0F0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMTAwMCAqIDYwICogNjAgKiAyNCAqIDM2NSAqIDEwKS50b0lTT1N0cmluZygpLFxuICAgICAgICBwcmFjdGljZUNvdW50OiAwLFxuICAgICAgICBsYXN0UHJhY3RpY2VEYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH07XG4gICAgICB1c2Vycy5wdXNoKG1hc3RlclVzZXIpO1xuICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmxvZyhg44Oe44K544K/44O844Ki44Kr44Km44Oz44OI44KS5L2c5oiQ44GX44G+44GX44GfOiAke2VtYWlsfWApO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHVwZGF0ZWQpIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcnMnLCBKU09OLnN0cmluZ2lmeSh1c2VycykpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgQXV0aFByb3ZpZGVyOiBSZWFjdC5GQzx7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfT4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IFt1c2VyLCBzZXRVc2VyXSA9IHVzZVN0YXRlPFVzZXIgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gIC8vIOWIneacn+WMluaZguOBq+ODnuOCueOCv+ODvOOCouOCq+OCpuODs+ODiOOCkueiuuiqjeODu+S9nOaIkFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGluaXRpYWxpemVNYXN0ZXJBY2NvdW50cygpO1xuICAgIFxuICAgIGNvbnN0IHNhdmVkVXNlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdndG8tdmFudGFnZS11c2VyJyk7XG4gICAgaWYgKHNhdmVkVXNlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGFyc2VkVXNlciA9IEpTT04ucGFyc2Uoc2F2ZWRVc2VyKTtcbiAgICAgICAgLy8g5Y+k44GE44Om44O844K244O844OH44O844K/44Gu5aC05ZCI44Gv5paw44GX44GE5b2i5byP44Gr5aSJ5o+bXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRVc2VyOiBVc2VyID0ge1xuICAgICAgICAgIC4uLnBhcnNlZFVzZXIsXG4gICAgICAgICAgZW1haWxWZXJpZmllZDogcGFyc2VkVXNlci5lbWFpbFZlcmlmaWVkID8/IGZhbHNlLFxuICAgICAgICAgIGlzTWFzdGVyVXNlcjogcGFyc2VkVXNlci5pc01hc3RlclVzZXIgPz8gTUFTVEVSX1VTRVJfRU1BSUxTLmluY2x1ZGVzKHBhcnNlZFVzZXIuZW1haWwpLFxuICAgICAgICAgIHN1YnNjcmlwdGlvblN0YXR1czogcGFyc2VkVXNlci5zdWJzY3JpcHRpb25TdGF0dXMgPz8gJ2ZyZWUnLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbkV4cGlyZXNBdDogcGFyc2VkVXNlci5zdWJzY3JpcHRpb25FeHBpcmVzQXRcbiAgICAgICAgfTtcbiAgICAgICAgc2V0VXNlcih1cGRhdGVkVXNlcik7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VyJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFVzZXIpKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBzYXZlZCB1c2VyOicsIGVycm9yKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2d0by12YW50YWdlLXVzZXInKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIC8vIOODpuODvOOCtuODvOOBjOioreWumuOBleOCjOOBn+W+jOOBq+e3tOe/kuWbnuaVsOOCkuODquOCu+ODg+ODiFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh1c2VyKSB7XG4gICAgICByZXNldFByYWN0aWNlQ291bnRJZk5ld0RheSgpO1xuICAgIH1cbiAgfSwgW3VzZXJdKTtcblxuICBjb25zdCByZWdpc3RlciA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8g5pei5a2Y44Om44O844K244O844Gu44OB44Kn44OD44KvXG4gICAgICBjb25zdCBleGlzdGluZ1VzZXJzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcnMnKSB8fCAnW10nKTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IGV4aXN0aW5nVXNlcnMuZmluZCgodTogYW55KSA9PiB1LmVtYWlsID09PSBlbWFpbCk7XG4gICAgICBcbiAgICAgIGlmIChleGlzdGluZ1VzZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfjgZPjga7jg6Hjg7zjg6vjgqLjg4njg6zjgrnjga/ml6LjgavnmbvpjLLjgZXjgozjgabjgYTjgb7jgZknKTtcbiAgICAgIH1cblxuICAgICAgLy8g44Oe44K544K/44O844Om44O844K244O844GL44Gp44GG44GL44KS44OB44Kn44OD44KvXG4gICAgICBjb25zdCBpc01hc3RlclVzZXIgPSBNQVNURVJfVVNFUl9FTUFJTFMuaW5jbHVkZXMoZW1haWwpO1xuICAgICAgY29uc3QgdmVyaWZpY2F0aW9uVG9rZW4gPSBnZW5lcmF0ZVZlcmlmaWNhdGlvblRva2VuKCk7XG5cbiAgICAgIGNvbnN0IG5ld1VzZXIgPSB7XG4gICAgICAgIGlkOiBgdXNlci0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKX1gLFxuICAgICAgICBlbWFpbCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgcGFzc3dvcmQ6IHNpbXBsZUhhc2gocGFzc3dvcmQpLCAvLyDjg5Hjgrnjg6/jg7zjg4njgpLjg4/jg4Pjgrfjg6XljJZcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGVtYWlsVmVyaWZpZWQ6IGlzTWFzdGVyVXNlciwgLy8g44Oe44K544K/44O844Om44O844K244O844Gv6Ieq5YuV55qE44Gr44Oh44O844Or56K66KqN5riI44G/XG4gICAgICAgIHZlcmlmaWNhdGlvblRva2VuOiBpc01hc3RlclVzZXIgPyB1bmRlZmluZWQgOiB2ZXJpZmljYXRpb25Ub2tlbixcbiAgICAgICAgaXNNYXN0ZXJVc2VyLFxuICAgICAgICBzdWJzY3JpcHRpb25TdGF0dXM6IGlzTWFzdGVyVXNlciA/ICdtYXN0ZXInIGFzIGNvbnN0IDogJ2ZyZWUnIGFzIGNvbnN0LFxuICAgICAgICBzdWJzY3JpcHRpb25FeHBpcmVzQXQ6IGlzTWFzdGVyVXNlciBcbiAgICAgICAgICA/IG5ldyBEYXRlKERhdGUubm93KCkgKyAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1ICogMTApLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJhY3RpY2VDb3VudDogMCxcbiAgICAgICAgbGFzdFByYWN0aWNlRGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9O1xuXG4gICAgICBleGlzdGluZ1VzZXJzLnB1c2gobmV3VXNlcik7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcnMnLCBKU09OLnN0cmluZ2lmeShleGlzdGluZ1VzZXJzKSk7XG5cbiAgICAgIC8vIOODnuOCueOCv+ODvOODpuODvOOCtuODvOOBp+OBquOBhOWgtOWQiOOBr+ODoeODvOODq+eiuuiqjeOCkumAgeS/oVxuICAgICAgaWYgKCFpc01hc3RlclVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2F1dGgvc2VuZC12ZXJpZmljYXRpb24tZW1haWwnLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgICB0b2tlbjogdmVyaWZpY2F0aW9uVG9rZW4sXG4gICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNlbmQgdmVyaWZpY2F0aW9uIGVtYWlsJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdWZXJpZmljYXRpb24gZW1haWwgc2VudCBzdWNjZXNzZnVsbHkgdG86JywgZW1haWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZW5kaW5nIHZlcmlmaWNhdGlvbiBlbWFpbDonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBwYXNzd29yZDogXywgLi4udXNlcldpdGhvdXRQYXNzd29yZCB9ID0gbmV3VXNlcjtcbiAgICAgIHNldFVzZXIodXNlcldpdGhvdXRQYXNzd29yZCk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcicsIEpTT04uc3RyaW5naWZ5KHVzZXJXaXRob3V0UGFzc3dvcmQpKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlZ2lzdHJhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGxvZ2luID0gYXN5bmMgKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycpIHx8ICdbXScpO1xuICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBzaW1wbGVIYXNoKHBhc3N3b3JkKTtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2Vycy5maW5kKCh1OiBhbnkpID0+IHUuZW1haWwgPT09IGVtYWlsICYmIHUucGFzc3dvcmQgPT09IGhhc2hlZFBhc3N3b3JkKTtcbiAgICAgIFxuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcign44Oh44O844Or44Ki44OJ44Os44K544G+44Gf44Gv44OR44K544Ov44O844OJ44GM5q2j44GX44GP44GC44KK44G+44Gb44KTJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgcGFzc3dvcmQ6IF8sIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA9IHVzZXI7XG4gICAgICBcbiAgICAgIC8vIOODnuOCueOCv+ODvOODpuODvOOCtuODvOOBruWgtOWQiOOBr+iHquWLleeahOOBq+ODoeODvOODq+eiuuiqjea4iOOBv+OBq+OBmeOCi1xuICAgICAgaWYgKE1BU1RFUl9VU0VSX0VNQUlMUy5pbmNsdWRlcyhlbWFpbCkgJiYgIXVzZXJXaXRob3V0UGFzc3dvcmQuZW1haWxWZXJpZmllZCkge1xuICAgICAgICB1c2VyV2l0aG91dFBhc3N3b3JkLmVtYWlsVmVyaWZpZWQgPSB0cnVlO1xuICAgICAgICB1c2VyV2l0aG91dFBhc3N3b3JkLmlzTWFzdGVyVXNlciA9IHRydWU7XG4gICAgICAgIHVzZXJXaXRob3V0UGFzc3dvcmQuc3Vic2NyaXB0aW9uU3RhdHVzID0gJ21hc3Rlcic7XG4gICAgICAgIHVzZXJXaXRob3V0UGFzc3dvcmQuc3Vic2NyaXB0aW9uRXhwaXJlc0F0ID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDEwMDAgKiA2MCAqIDYwICogMjQgKiAzNjUgKiAxMCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIOODpuODvOOCtuODvOODquOCueODiOOCkuabtOaWsFxuICAgICAgICBjb25zdCB1cGRhdGVkVXNlcnMgPSB1c2Vycy5tYXAoKHU6IGFueSkgPT4gXG4gICAgICAgICAgdS5lbWFpbCA9PT0gZW1haWwgPyB7IC4uLnUsIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA6IHVcbiAgICAgICAgKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2d0by12YW50YWdlLXVzZXJzJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFVzZXJzKSk7XG4gICAgICB9XG5cbiAgICAgIHNldFVzZXIodXNlcldpdGhvdXRQYXNzd29yZCk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcicsIEpTT04uc3RyaW5naWZ5KHVzZXJXaXRob3V0UGFzc3dvcmQpKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ2luIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGxvZ291dCA9ICgpID0+IHtcbiAgICBzZXRVc2VyKG51bGwpO1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdndG8tdmFudGFnZS11c2VyJyk7XG4gIH07XG5cbiAgY29uc3QgdmVyaWZ5RW1haWwgPSBhc3luYyAodG9rZW46IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXVzZXIpIHJldHVybiBmYWxzZTtcblxuICAgICAgY29uc3QgdXNlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycpIHx8ICdbXScpO1xuICAgICAgY29uc3QgdXNlckluZGV4ID0gdXNlcnMuZmluZEluZGV4KCh1OiBhbnkpID0+IHUuZW1haWwgPT09IHVzZXIuZW1haWwpO1xuICAgICAgXG4gICAgICBpZiAodXNlckluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHVzZXJzW3VzZXJJbmRleF07XG4gICAgICBpZiAoY3VycmVudFVzZXIudmVyaWZpY2F0aW9uVG9rZW4gIT09IHRva2VuKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIC8vIOODoeODvOODq+eiuuiqjeOCkuWujOS6hlxuICAgICAgY29uc3QgdXBkYXRlZFVzZXI6IFVzZXIgPSB7XG4gICAgICAgIC4uLnVzZXIsXG4gICAgICAgIGVtYWlsVmVyaWZpZWQ6IHRydWUsXG4gICAgICAgIHZlcmlmaWNhdGlvblRva2VuOiB1bmRlZmluZWRcbiAgICAgIH07XG5cbiAgICAgIC8vIOODpuODvOOCtuODvOODquOCueODiOOCkuabtOaWsFxuICAgICAgdXNlcnNbdXNlckluZGV4XSA9IHsgLi4uY3VycmVudFVzZXIsIGVtYWlsVmVyaWZpZWQ6IHRydWUsIHZlcmlmaWNhdGlvblRva2VuOiB1bmRlZmluZWQgfTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSk7XG5cbiAgICAgIC8vIOePvuWcqOOBruODpuODvOOCtuODvOOCkuabtOaWsFxuICAgICAgc2V0VXNlcih1cGRhdGVkVXNlcik7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcicsIEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRVc2VyKSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFbWFpbCB2ZXJpZmljYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmVzZW5kVmVyaWZpY2F0aW9uRW1haWwgPSBhc3luYyAoZW1haWw6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2d0by12YW50YWdlLXVzZXJzJykgfHwgJ1tdJyk7XG4gICAgICBjb25zdCB1c2VySW5kZXggPSB1c2Vycy5maW5kSW5kZXgoKHU6IGFueSkgPT4gdS5lbWFpbCA9PT0gZW1haWwpO1xuICAgICAgXG4gICAgICBpZiAodXNlckluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBjb25zdCBuZXdUb2tlbiA9IGdlbmVyYXRlVmVyaWZpY2F0aW9uVG9rZW4oKTtcbiAgICAgIHVzZXJzW3VzZXJJbmRleF0udmVyaWZpY2F0aW9uVG9rZW4gPSBuZXdUb2tlbjtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSk7XG5cbiAgICAgIC8vIOePvuWcqOOBruODpuODvOOCtuODvOOCguabtOaWsFxuICAgICAgaWYgKHVzZXIgJiYgdXNlci5lbWFpbCA9PT0gZW1haWwpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSB7IC4uLnVzZXIsIHZlcmlmaWNhdGlvblRva2VuOiBuZXdUb2tlbiB9O1xuICAgICAgICBzZXRVc2VyKHVwZGF0ZWRVc2VyKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2d0by12YW50YWdlLXVzZXInLCBKU09OLnN0cmluZ2lmeSh1cGRhdGVkVXNlcikpO1xuICAgICAgfVxuXG4gICAgICAvLyDjg6Hjg7zjg6vnorroqo3jg6Hjg7zjg6vjgpLlho3pgIHkv6FcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvYXV0aC9zZW5kLXZlcmlmaWNhdGlvbi1lbWFpbCcsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICB0b2tlbjogbmV3VG9rZW4sXG4gICAgICAgICAgICBuYW1lOiB1c2Vyc1t1c2VySW5kZXhdLm5hbWVcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZXNlbmQgdmVyaWZpY2F0aW9uIGVtYWlsJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdWZXJpZmljYXRpb24gZW1haWwgcmVzZW50IHN1Y2Nlc3NmdWxseSB0bzonLCBlbWFpbCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlc2VuZGluZyB2ZXJpZmljYXRpb24gZW1haWw6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1Jlc2VuZCB2ZXJpZmljYXRpb24gZW1haWwgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLy8g57e057+S5Zue5pWw566h55CGXG4gIGNvbnN0IGdldE1heFByYWN0aWNlQ291bnQgPSAoc3Vic2NyaXB0aW9uU3RhdHVzOiBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICAgIHN3aXRjaCAoc3Vic2NyaXB0aW9uU3RhdHVzKSB7XG4gICAgICBjYXNlICdmcmVlJzogcmV0dXJuIDU7XG4gICAgICBjYXNlICdsaWdodCc6IHJldHVybiA1MDtcbiAgICAgIGNhc2UgJ3ByZW1pdW0nOlxuICAgICAgY2FzZSAnbWFzdGVyJzogcmV0dXJuIEluZmluaXR5O1xuICAgICAgZGVmYXVsdDogcmV0dXJuIDU7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJlc2V0UHJhY3RpY2VDb3VudElmTmV3RGF5ID0gKCkgPT4ge1xuICAgIGlmICghdXNlcikgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKS50b0RhdGVTdHJpbmcoKTtcbiAgICBjb25zdCBsYXN0UHJhY3RpY2VEYXRlID0gdXNlci5sYXN0UHJhY3RpY2VEYXRlID8gbmV3IERhdGUodXNlci5sYXN0UHJhY3RpY2VEYXRlKS50b0RhdGVTdHJpbmcoKSA6IG51bGw7XG4gICAgXG4gICAgaWYgKGxhc3RQcmFjdGljZURhdGUgIT09IHRvZGF5KSB7XG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IHsgLi4udXNlciwgcHJhY3RpY2VDb3VudDogMCwgbGFzdFByYWN0aWNlRGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH07XG4gICAgICBzZXRVc2VyKHVwZGF0ZWRVc2VyKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VyJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFVzZXIpKTtcbiAgICAgIFxuICAgICAgLy8g44Om44O844K244O844Oq44K544OI44KC5pu05pawXG4gICAgICBjb25zdCB1c2VycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2d0by12YW50YWdlLXVzZXJzJykgfHwgJ1tdJyk7XG4gICAgICBjb25zdCB1c2VySW5kZXggPSB1c2Vycy5maW5kSW5kZXgoKHU6IGFueSkgPT4gdS5lbWFpbCA9PT0gdXNlci5lbWFpbCk7XG4gICAgICBpZiAodXNlckluZGV4ICE9PSAtMSkge1xuICAgICAgICB1c2Vyc1t1c2VySW5kZXhdID0gdXBkYXRlZFVzZXI7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGluY3JlbWVudFByYWN0aWNlQ291bnQgPSAoKSA9PiB7XG4gICAgaWYgKCF1c2VyKSByZXR1cm47XG4gICAgXG4gICAgcmVzZXRQcmFjdGljZUNvdW50SWZOZXdEYXkoKTtcbiAgICBcbiAgICBjb25zdCBjdXJyZW50Q291bnQgPSB1c2VyLnByYWN0aWNlQ291bnQgfHwgMDtcbiAgICBjb25zdCB1cGRhdGVkVXNlciA9IHsgLi4udXNlciwgcHJhY3RpY2VDb3VudDogY3VycmVudENvdW50ICsgMSB9O1xuICAgIHNldFVzZXIodXBkYXRlZFVzZXIpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VyJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFVzZXIpKTtcbiAgICBcbiAgICAvLyDjg6bjg7zjgrbjg7zjg6rjgrnjg4jjgoLmm7TmlrBcbiAgICBjb25zdCB1c2VycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2d0by12YW50YWdlLXVzZXJzJykgfHwgJ1tdJyk7XG4gICAgY29uc3QgdXNlckluZGV4ID0gdXNlcnMuZmluZEluZGV4KCh1OiBhbnkpID0+IHUuZW1haWwgPT09IHVzZXIuZW1haWwpO1xuICAgIGlmICh1c2VySW5kZXggIT09IC0xKSB7XG4gICAgICB1c2Vyc1t1c2VySW5kZXhdID0gdXBkYXRlZFVzZXI7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcnMnLCBKU09OLnN0cmluZ2lmeSh1c2VycykpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBpc0F1dGhlbnRpY2F0ZWQgPSAhIXVzZXI7XG4gIGNvbnN0IGlzRW1haWxWZXJpZmllZCA9IEJvb2xlYW4odXNlcj8uZW1haWxWZXJpZmllZCk7XG4gIGNvbnN0IGlzTWFzdGVyVXNlciA9IEJvb2xlYW4odXNlcj8uaXNNYXN0ZXJVc2VyKTtcbiAgY29uc3QgaGFzQWN0aXZlU3Vic2NyaXB0aW9uID0gdXNlcj8uc3Vic2NyaXB0aW9uU3RhdHVzID09PSAncHJlbWl1bScgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcj8uc3Vic2NyaXB0aW9uU3RhdHVzID09PSAnbWFzdGVyJyB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHVzZXI/LnN1YnNjcmlwdGlvbkV4cGlyZXNBdCAmJiBuZXcgRGF0ZSh1c2VyLnN1YnNjcmlwdGlvbkV4cGlyZXNBdCkgPiBuZXcgRGF0ZSgpKTtcblxuICAvLyDnt7Tnv5LliLbpmZDjg4Hjgqfjg4Pjgq9cbiAgY29uc3QgbWF4UHJhY3RpY2VDb3VudCA9IGdldE1heFByYWN0aWNlQ291bnQodXNlcj8uc3Vic2NyaXB0aW9uU3RhdHVzIHx8ICdmcmVlJyk7XG4gIGNvbnN0IHByYWN0aWNlQ291bnQgPSB1c2VyPy5wcmFjdGljZUNvdW50IHx8IDA7XG4gIGNvbnN0IGNhblByYWN0aWNlID0gdXNlcj8uc3Vic2NyaXB0aW9uU3RhdHVzID09PSAncHJlbWl1bScgfHwgXG4gICAgICAgICAgICAgICAgICAgICB1c2VyPy5zdWJzY3JpcHRpb25TdGF0dXMgPT09ICdtYXN0ZXInIHx8IFxuICAgICAgICAgICAgICAgICAgICAgcHJhY3RpY2VDb3VudCA8IG1heFByYWN0aWNlQ291bnQ7XG5cbiAgLy8g44K544K/44OD44Kv44K144Kk44K65Yi26ZmQ5qmf6IO9XG4gIGNvbnN0IGNhblVzZVN0YWNrU2l6ZSA9IChzdGFja1NpemU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvblN0YXR1cyA9IHVzZXI/LnN1YnNjcmlwdGlvblN0YXR1cyB8fCAnZnJlZSc7XG4gICAgaWYgKHN1YnNjcmlwdGlvblN0YXR1cyA9PT0gJ3ByZW1pdW0nIHx8IHN1YnNjcmlwdGlvblN0YXR1cyA9PT0gJ21hc3RlcicpIHtcbiAgICAgIHJldHVybiB0cnVlOyAvLyDjg5fjg6zjg5/jgqLjg6Djg7vjg57jgrnjgr/jg7zjga/lhajjgrnjgr/jg4Pjgq/jgrXjgqTjgrrkvb/nlKjlj6/og71cbiAgICB9XG4gICAgaWYgKHN1YnNjcmlwdGlvblN0YXR1cyA9PT0gJ2xpZ2h0Jykge1xuICAgICAgcmV0dXJuIHRydWU7IC8vIOODqeOCpOODiOODl+ODqeODs+OCguWFqOOCueOCv+ODg+OCr+OCteOCpOOCuuS9v+eUqOWPr+iDvVxuICAgIH1cbiAgICAvLyDnhKHmlpnjg5fjg6njg7Pjga8zMEJC44Gu44G/XG4gICAgcmV0dXJuIHN0YWNrU2l6ZSA9PT0gJzMwQkInO1xuICB9O1xuXG4gIGNvbnN0IGdldEFsbG93ZWRTdGFja1NpemVzID0gKCk6IHN0cmluZ1tdID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25TdGF0dXMgPSB1c2VyPy5zdWJzY3JpcHRpb25TdGF0dXMgfHwgJ2ZyZWUnO1xuICAgIGlmIChzdWJzY3JpcHRpb25TdGF0dXMgPT09ICdwcmVtaXVtJyB8fCBzdWJzY3JpcHRpb25TdGF0dXMgPT09ICdtYXN0ZXInIHx8IHN1YnNjcmlwdGlvblN0YXR1cyA9PT0gJ2xpZ2h0Jykge1xuICAgICAgcmV0dXJuIFsnMTBCQicsICcxNUJCJywgJzIwQkInLCAnMzBCQicsICc0MEJCJywgJzUwQkInLCAnNzVCQiddOyAvLyDlhajjgrnjgr/jg4Pjgq/jgrXjgqTjgrpcbiAgICB9XG4gICAgcmV0dXJuIFsnMzBCQiddOyAvLyDnhKHmlpnjg5fjg6njg7Pjga8zMEJC44Gu44G/XG4gIH07XG5cbiAgY29uc3QgdmFsdWU6IEF1dGhDb250ZXh0VHlwZSA9IHtcbiAgICB1c2VyLFxuICAgIGlzTG9hZGluZyxcbiAgICByZWdpc3RlcixcbiAgICBsb2dpbixcbiAgICBsb2dvdXQsXG4gICAgaXNBdXRoZW50aWNhdGVkLFxuICAgIHZlcmlmeUVtYWlsLFxuICAgIHJlc2VuZFZlcmlmaWNhdGlvbkVtYWlsLFxuICAgIGlzRW1haWxWZXJpZmllZCxcbiAgICBpc01hc3RlclVzZXIsXG4gICAgaGFzQWN0aXZlU3Vic2NyaXB0aW9uLFxuICAgIGNhblByYWN0aWNlLFxuICAgIHByYWN0aWNlQ291bnQsXG4gICAgbWF4UHJhY3RpY2VDb3VudCxcbiAgICBpbmNyZW1lbnRQcmFjdGljZUNvdW50LFxuICAgIGNhblVzZVN0YWNrU2l6ZSxcbiAgICBnZXRBbGxvd2VkU3RhY2tTaXplc1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEF1dGhDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9BdXRoQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07ICJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJBdXRoQ29udGV4dCIsInVuZGVmaW5lZCIsInVzZUF1dGgiLCJjb250ZXh0IiwiRXJyb3IiLCJNQVNURVJfVVNFUl9FTUFJTFMiLCJNQVNURVJfUEFTU1dPUkQiLCJzaW1wbGVIYXNoIiwic3RyIiwiaGFzaCIsImkiLCJsZW5ndGgiLCJjaGFyIiwiY2hhckNvZGVBdCIsInRvU3RyaW5nIiwiZ2VuZXJhdGVWZXJpZmljYXRpb25Ub2tlbiIsIk1hdGgiLCJyYW5kb20iLCJzdWJzdHJpbmciLCJpbml0aWFsaXplTWFzdGVyQWNjb3VudHMiLCJ1c2VycyIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJ1cGRhdGVkIiwiZm9yRWFjaCIsImVtYWlsIiwiZXhpc3RpbmdVc2VyIiwiZmluZCIsInUiLCJtYXN0ZXJVc2VyIiwiaWQiLCJEYXRlIiwibm93IiwibmFtZSIsInBhc3N3b3JkIiwiY3JlYXRlZEF0IiwidG9JU09TdHJpbmciLCJlbWFpbFZlcmlmaWVkIiwiaXNNYXN0ZXJVc2VyIiwic3Vic2NyaXB0aW9uU3RhdHVzIiwic3Vic2NyaXB0aW9uRXhwaXJlc0F0IiwicHJhY3RpY2VDb3VudCIsImxhc3RQcmFjdGljZURhdGUiLCJwdXNoIiwiY29uc29sZSIsImxvZyIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJBdXRoUHJvdmlkZXIiLCJjaGlsZHJlbiIsInVzZXIiLCJzZXRVc2VyIiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwic2F2ZWRVc2VyIiwicGFyc2VkVXNlciIsInVwZGF0ZWRVc2VyIiwiaW5jbHVkZXMiLCJlcnJvciIsInJlbW92ZUl0ZW0iLCJyZXNldFByYWN0aWNlQ291bnRJZk5ld0RheSIsInJlZ2lzdGVyIiwiZXhpc3RpbmdVc2VycyIsInZlcmlmaWNhdGlvblRva2VuIiwibmV3VXNlciIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsInRva2VuIiwib2siLCJfIiwidXNlcldpdGhvdXRQYXNzd29yZCIsImxvZ2luIiwiaGFzaGVkUGFzc3dvcmQiLCJ1cGRhdGVkVXNlcnMiLCJtYXAiLCJsb2dvdXQiLCJ2ZXJpZnlFbWFpbCIsInVzZXJJbmRleCIsImZpbmRJbmRleCIsImN1cnJlbnRVc2VyIiwicmVzZW5kVmVyaWZpY2F0aW9uRW1haWwiLCJuZXdUb2tlbiIsImdldE1heFByYWN0aWNlQ291bnQiLCJJbmZpbml0eSIsInRvZGF5IiwidG9EYXRlU3RyaW5nIiwiaW5jcmVtZW50UHJhY3RpY2VDb3VudCIsImN1cnJlbnRDb3VudCIsImlzQXV0aGVudGljYXRlZCIsImlzRW1haWxWZXJpZmllZCIsIkJvb2xlYW4iLCJoYXNBY3RpdmVTdWJzY3JpcHRpb24iLCJtYXhQcmFjdGljZUNvdW50IiwiY2FuUHJhY3RpY2UiLCJjYW5Vc2VTdGFja1NpemUiLCJzdGFja1NpemUiLCJnZXRBbGxvd2VkU3RhY2tTaXplcyIsInZhbHVlIiwiUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/AuthContext.tsx\n"));

/***/ })

});