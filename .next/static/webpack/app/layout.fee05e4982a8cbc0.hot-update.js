"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ useAuth,AuthProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useAuth = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// マスターユーザーのメールアドレスリスト\nconst MASTER_USER_EMAILS = [\n    \"admin@gtovantage.com\",\n    \"master@gtovantage.com\"\n];\n// マスターアカウントの初期パスワード（本番環境では変更が必要）\nconst MASTER_PASSWORD = \"master123456\";\n// 簡単なハッシュ関数（本番環境ではbcrypt等を使用）\nconst simpleHash = (str)=>{\n    let hash = 0;\n    for(let i = 0; i < str.length; i++){\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString();\n};\n// メール確認トークンを生成する関数\nconst generateVerificationToken = ()=>{\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\n// マスターアカウントを初期化する関数\nconst initializeMasterAccounts = ()=>{\n    const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n    let updated = false;\n    MASTER_USER_EMAILS.forEach((email)=>{\n        const existingUser = users.find((u)=>u.email === email);\n        if (!existingUser) {\n            const masterUser = {\n                id: \"master-\".concat(Date.now(), \"-\").concat(Math.random()),\n                email,\n                name: email === \"master@gtovantage.com\" ? \"Master User\" : \"Admin User\",\n                password: simpleHash(MASTER_PASSWORD),\n                createdAt: new Date().toISOString(),\n                emailVerified: true,\n                isMasterUser: true,\n                subscriptionStatus: \"master\",\n                subscriptionExpiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).toISOString(),\n                practiceCount: 0,\n                lastPracticeDate: new Date().toISOString()\n            };\n            users.push(masterUser);\n            updated = true;\n            console.log(\"マスターアカウントを作成しました: \".concat(email));\n        }\n    });\n    if (updated) {\n        localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n    }\n};\nconst AuthProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // 初期化時にマスターアカウントを確認・作成\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        initializeMasterAccounts();\n        const savedUser = localStorage.getItem(\"gto-vantage-user\");\n        if (savedUser) {\n            try {\n                const parsedUser = JSON.parse(savedUser);\n                var _parsedUser_emailVerified, _parsedUser_isMasterUser, _parsedUser_subscriptionStatus;\n                // 古いユーザーデータの場合は新しい形式に変換\n                const updatedUser = {\n                    ...parsedUser,\n                    emailVerified: (_parsedUser_emailVerified = parsedUser.emailVerified) !== null && _parsedUser_emailVerified !== void 0 ? _parsedUser_emailVerified : false,\n                    isMasterUser: (_parsedUser_isMasterUser = parsedUser.isMasterUser) !== null && _parsedUser_isMasterUser !== void 0 ? _parsedUser_isMasterUser : MASTER_USER_EMAILS.includes(parsedUser.email),\n                    subscriptionStatus: (_parsedUser_subscriptionStatus = parsedUser.subscriptionStatus) !== null && _parsedUser_subscriptionStatus !== void 0 ? _parsedUser_subscriptionStatus : \"free\",\n                    subscriptionExpiresAt: parsedUser.subscriptionExpiresAt\n                };\n                setUser(updatedUser);\n                localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            } catch (error) {\n                console.error(\"Failed to parse saved user:\", error);\n                localStorage.removeItem(\"gto-vantage-user\");\n            }\n        }\n        setIsLoading(false);\n    }, []);\n    // ユーザーが設定された後に練習回数をリセット\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (user) {\n            resetPracticeCountIfNewDay();\n        }\n    }, [\n        user,\n        resetPracticeCountIfNewDay\n    ]);\n    const register = async (email, password, name)=>{\n        try {\n            // 既存ユーザーのチェック\n            const existingUsers = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const existingUser = existingUsers.find((u)=>u.email === email);\n            if (existingUser) {\n                throw new Error(\"このメールアドレスは既に登録されています\");\n            }\n            // マスターユーザーかどうかをチェック\n            const isMasterUser = MASTER_USER_EMAILS.includes(email);\n            const verificationToken = generateVerificationToken();\n            const newUser = {\n                id: \"user-\".concat(Date.now(), \"-\").concat(Math.random()),\n                email,\n                name,\n                password: simpleHash(password),\n                createdAt: new Date().toISOString(),\n                emailVerified: isMasterUser,\n                verificationToken: isMasterUser ? undefined : verificationToken,\n                isMasterUser,\n                subscriptionStatus: isMasterUser ? \"master\" : \"free\",\n                subscriptionExpiresAt: isMasterUser ? new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).toISOString() : undefined,\n                practiceCount: 0,\n                lastPracticeDate: new Date().toISOString()\n            };\n            existingUsers.push(newUser);\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(existingUsers));\n            // マスターユーザーでない場合はメール確認を送信\n            if (!isMasterUser) {\n                try {\n                    const response = await fetch(\"/api/auth/send-verification-email\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            email,\n                            token: verificationToken,\n                            name\n                        })\n                    });\n                    if (!response.ok) {\n                        console.error(\"Failed to send verification email\");\n                    } else {\n                        console.log(\"Verification email sent successfully to:\", email);\n                    }\n                } catch (error) {\n                    console.error(\"Error sending verification email:\", error);\n                }\n            }\n            const { password: _, ...userWithoutPassword } = newUser;\n            setUser(userWithoutPassword);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(userWithoutPassword));\n            return true;\n        } catch (error) {\n            console.error(\"Registration failed:\", error);\n            throw error;\n        }\n    };\n    const login = async (email, password)=>{\n        try {\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const hashedPassword = simpleHash(password);\n            const user = users.find((u)=>u.email === email && u.password === hashedPassword);\n            if (!user) {\n                throw new Error(\"メールアドレスまたはパスワードが正しくありません\");\n            }\n            const { password: _, ...userWithoutPassword } = user;\n            // マスターユーザーの場合は自動的にメール確認済みにする\n            if (MASTER_USER_EMAILS.includes(email) && !userWithoutPassword.emailVerified) {\n                userWithoutPassword.emailVerified = true;\n                userWithoutPassword.isMasterUser = true;\n                userWithoutPassword.subscriptionStatus = \"master\";\n                userWithoutPassword.subscriptionExpiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).toISOString();\n                // ユーザーリストを更新\n                const updatedUsers = users.map((u)=>u.email === email ? {\n                        ...u,\n                        ...userWithoutPassword\n                    } : u);\n                localStorage.setItem(\"gto-vantage-users\", JSON.stringify(updatedUsers));\n            }\n            setUser(userWithoutPassword);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(userWithoutPassword));\n            return true;\n        } catch (error) {\n            console.error(\"Login failed:\", error);\n            return false;\n        }\n    };\n    const logout = ()=>{\n        setUser(null);\n        localStorage.removeItem(\"gto-vantage-user\");\n    };\n    const verifyEmail = async (token)=>{\n        try {\n            if (!user) return false;\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const userIndex = users.findIndex((u)=>u.email === user.email);\n            if (userIndex === -1) return false;\n            const currentUser = users[userIndex];\n            if (currentUser.verificationToken !== token) return false;\n            // メール確認を完了\n            const updatedUser = {\n                ...user,\n                emailVerified: true,\n                verificationToken: undefined\n            };\n            // ユーザーリストを更新\n            users[userIndex] = {\n                ...currentUser,\n                emailVerified: true,\n                verificationToken: undefined\n            };\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n            // 現在のユーザーを更新\n            setUser(updatedUser);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            return true;\n        } catch (error) {\n            console.error(\"Email verification failed:\", error);\n            return false;\n        }\n    };\n    const resendVerificationEmail = async (email)=>{\n        try {\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const userIndex = users.findIndex((u)=>u.email === email);\n            if (userIndex === -1) return false;\n            const newToken = generateVerificationToken();\n            users[userIndex].verificationToken = newToken;\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n            // 現在のユーザーも更新\n            if (user && user.email === email) {\n                const updatedUser = {\n                    ...user,\n                    verificationToken: newToken\n                };\n                setUser(updatedUser);\n                localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            }\n            // メール確認メールを再送信\n            try {\n                const response = await fetch(\"/api/auth/send-verification-email\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        email,\n                        token: newToken,\n                        name: users[userIndex].name\n                    })\n                });\n                if (!response.ok) {\n                    console.error(\"Failed to resend verification email\");\n                    return false;\n                } else {\n                    console.log(\"Verification email resent successfully to:\", email);\n                    return true;\n                }\n            } catch (error) {\n                console.error(\"Error resending verification email:\", error);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Resend verification email failed:\", error);\n            return false;\n        }\n    };\n    // 練習回数管理\n    const getMaxPracticeCount = (subscriptionStatus)=>{\n        switch(subscriptionStatus){\n            case \"free\":\n                return 5;\n            case \"light\":\n                return 50;\n            case \"premium\":\n            case \"master\":\n                return Infinity;\n            default:\n                return 5;\n        }\n    };\n    const resetPracticeCountIfNewDay = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!user) return;\n        const today = new Date().toDateString();\n        const lastPracticeDate = user.lastPracticeDate ? new Date(user.lastPracticeDate).toDateString() : null;\n        if (lastPracticeDate !== today) {\n            const updatedUser = {\n                ...user,\n                practiceCount: 0,\n                lastPracticeDate: new Date().toISOString()\n            };\n            setUser(updatedUser);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            // ユーザーリストも更新\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const userIndex = users.findIndex((u)=>u.email === user.email);\n            if (userIndex !== -1) {\n                users[userIndex] = updatedUser;\n                localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n            }\n        }\n    }, [\n        user\n    ]);\n    const incrementPracticeCount = ()=>{\n        if (!user) return;\n        resetPracticeCountIfNewDay();\n        const currentCount = user.practiceCount || 0;\n        const updatedUser = {\n            ...user,\n            practiceCount: currentCount + 1\n        };\n        setUser(updatedUser);\n        localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n        // ユーザーリストも更新\n        const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n        const userIndex = users.findIndex((u)=>u.email === user.email);\n        if (userIndex !== -1) {\n            users[userIndex] = updatedUser;\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n        }\n    };\n    const isAuthenticated = !!user;\n    const isEmailVerified = Boolean(user === null || user === void 0 ? void 0 : user.emailVerified);\n    const isMasterUser = Boolean(user === null || user === void 0 ? void 0 : user.isMasterUser);\n    const hasActiveSubscription = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"premium\" || (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"master\" || Boolean((user === null || user === void 0 ? void 0 : user.subscriptionExpiresAt) && new Date(user.subscriptionExpiresAt) > new Date());\n    // 練習制限チェック\n    const maxPracticeCount = getMaxPracticeCount((user === null || user === void 0 ? void 0 : user.subscriptionStatus) || \"free\");\n    const practiceCount = (user === null || user === void 0 ? void 0 : user.practiceCount) || 0;\n    const canPractice = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"premium\" || (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"master\" || practiceCount < maxPracticeCount;\n    // スタックサイズ制限機能\n    const canUseStackSize = (stackSize)=>{\n        const subscriptionStatus = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) || \"free\";\n        if (subscriptionStatus === \"premium\" || subscriptionStatus === \"master\") {\n            return true; // プレミアム・マスターは全スタックサイズ使用可能\n        }\n        if (subscriptionStatus === \"light\") {\n            return true; // ライトプランも全スタックサイズ使用可能\n        }\n        // 無料プランは30BBのみ\n        return stackSize === \"30BB\";\n    };\n    const getAllowedStackSizes = ()=>{\n        const subscriptionStatus = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) || \"free\";\n        if (subscriptionStatus === \"premium\" || subscriptionStatus === \"master\" || subscriptionStatus === \"light\") {\n            return [\n                \"10BB\",\n                \"15BB\",\n                \"20BB\",\n                \"30BB\",\n                \"40BB\",\n                \"50BB\",\n                \"75BB\"\n            ]; // 全スタックサイズ\n        }\n        return [\n            \"30BB\"\n        ]; // 無料プランは30BBのみ\n    };\n    const value = {\n        user,\n        isLoading,\n        register,\n        login,\n        logout,\n        isAuthenticated,\n        verifyEmail,\n        resendVerificationEmail,\n        isEmailVerified,\n        isMasterUser,\n        hasActiveSubscription,\n        canPractice,\n        practiceCount,\n        maxPracticeCount,\n        incrementPracticeCount,\n        canUseStackSize,\n        getAllowedStackSizes\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/kensuke/Desktop/gtovantage/src/contexts/AuthContext.tsx\",\n        lineNumber: 444,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(AuthProvider, \"ZZUkE83eN3CpfUb1gmNZd7DL6z0=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0cy9BdXRoQ29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUUyRjtBQW9DM0YsTUFBTU0sNEJBQWNMLG9EQUFhQSxDQUE4Qk07QUFFeEQsTUFBTUMsVUFBVTs7SUFDckIsTUFBTUMsVUFBVVAsaURBQVVBLENBQUNJO0lBQzNCLElBQUlHLFlBQVlGLFdBQVc7UUFDekIsTUFBTSxJQUFJRyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVCxFQUFFO0dBTldEO0FBUWIsc0JBQXNCO0FBQ3RCLE1BQU1HLHFCQUFxQjtJQUN6QjtJQUNBO0NBQ0Q7QUFFRCxpQ0FBaUM7QUFDakMsTUFBTUMsa0JBQWtCO0FBRXhCLDhCQUE4QjtBQUM5QixNQUFNQyxhQUFhLENBQUNDO0lBQ2xCLElBQUlDLE9BQU87SUFDWCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsSUFBSUcsTUFBTSxFQUFFRCxJQUFLO1FBQ25DLE1BQU1FLE9BQU9KLElBQUlLLFVBQVUsQ0FBQ0g7UUFDNUJELE9BQU8sQ0FBRUEsUUFBUSxLQUFLQSxPQUFRRztRQUM5QkgsT0FBT0EsT0FBT0EsTUFBTSwyQkFBMkI7SUFDakQ7SUFDQSxPQUFPQSxLQUFLSyxRQUFRO0FBQ3RCO0FBRUEsbUJBQW1CO0FBQ25CLE1BQU1DLDRCQUE0QjtJQUNoQyxPQUFPQyxLQUFLQyxNQUFNLEdBQUdILFFBQVEsQ0FBQyxJQUFJSSxTQUFTLENBQUMsR0FBRyxNQUFNRixLQUFLQyxNQUFNLEdBQUdILFFBQVEsQ0FBQyxJQUFJSSxTQUFTLENBQUMsR0FBRztBQUMvRjtBQUVBLG9CQUFvQjtBQUNwQixNQUFNQywyQkFBMkI7SUFDL0IsTUFBTUMsUUFBUUMsS0FBS0MsS0FBSyxDQUFDQyxhQUFhQyxPQUFPLENBQUMsd0JBQXdCO0lBQ3RFLElBQUlDLFVBQVU7SUFFZHBCLG1CQUFtQnFCLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDekIsTUFBTUMsZUFBZVIsTUFBTVMsSUFB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QSxpQkFBQUEsMkJBQUFBLEtBQU1YLGtCQUFrQixNQUFLLGFBQzlCVyxDQUFBQSxpQkFBQUEsMkJBQUFBLEtBQU1YLGtCQUFrQixNQUFLLFlBQzdCRSxnQkFBZ0JzRDtJQUVuQyxjQUFjO0lBQ2QsTUFBTUUsa0JBQWtCLENBQUNDO1FBQ3ZCLE1BQU0zRCxxQkFBcUJXLENBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTVgsa0JBQWtCLEtBQUk7UUFDdkQsSUFBSUEsdUJBQXVCLGFBQWFBLHVCQUF1QixVQUFVO1lBQ3ZFLE9BQU8sTUFBTSwwQkFBMEI7UUFDekM7UUFDQSxJQUFJQSx1QkFBdUIsU0FBUztZQUNsQyxPQUFPLE1BQU0sc0JBQXNCO1FBQ3JDO1FBQ0EsZUFBZTtRQUNmLE9BQU8yRCxjQUFjO0lBQ3ZCO0lBRUEsTUFBTUMsdUJBQXVCO1FBQzNCLE1BQU01RCxxQkFBcUJXLENBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTVgsa0JBQWtCLEtBQUk7UUFDdkQsSUFBSUEsdUJBQXVCLGFBQWFBLHVCQUF1QixZQUFZQSx1QkFBdUIsU0FBUztZQUN6RyxPQUFPO2dCQUFDO2dCQUFRO2dCQUFRO2dCQUFRO2dCQUFRO2dCQUFRO2dCQUFRO2FBQU8sRUFBRSxXQUFXO1FBQzlFO1FBQ0EsT0FBTztZQUFDO1NBQU8sRUFBRSxlQUFlO0lBQ2xDO0lBRUEsTUFBTTZELFFBQXlCO1FBQzdCbEQ7UUFDQUU7UUFDQVM7UUFDQWE7UUFDQUk7UUFDQWE7UUFDQVo7UUFDQUk7UUFDQVM7UUFDQXREO1FBQ0F3RDtRQUNBRTtRQUNBdkQ7UUFDQXNEO1FBQ0FOO1FBQ0FRO1FBQ0FFO0lBQ0Y7SUFFQSxxQkFDRSw4REFBQ3JHLFlBQVl1RyxRQUFRO1FBQUNELE9BQU9BO2tCQUMxQm5EOzs7Ozs7QUFHUCxFQUFFO0lBdFZXRDtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29udGV4dHMvQXV0aENvbnRleHQudHN4PzFmYTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBVc2VyIHtcbiAgaWQ6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBjcmVhdGVkQXQ6IHN0cmluZztcbiAgZW1haWxWZXJpZmllZDogYm9vbGVhbjtcbiAgdmVyaWZpY2F0aW9uVG9rZW4/OiBzdHJpbmc7XG4gIGlzTWFzdGVyVXNlcjogYm9vbGVhbjtcbiAgc3Vic2NyaXB0aW9uU3RhdHVzOiAnZnJlZScgfCAnbGlnaHQnIHwgJ3ByZW1pdW0nIHwgJ21hc3Rlcic7XG4gIHN1YnNjcmlwdGlvbkV4cGlyZXNBdD86IHN0cmluZztcbiAgcHJhY3RpY2VDb3VudD86IG51bWJlcjtcbiAgbGFzdFByYWN0aWNlRGF0ZT86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEF1dGhDb250ZXh0VHlwZSB7XG4gIHVzZXI6IFVzZXIgfCBudWxsO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIHJlZ2lzdGVyOiAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xuICBsb2dpbjogKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gIGxvZ291dDogKCkgPT4gdm9pZDtcbiAgaXNBdXRoZW50aWNhdGVkOiBib29sZWFuO1xuICB2ZXJpZnlFbWFpbDogKHRva2VuOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gIHJlc2VuZFZlcmlmaWNhdGlvbkVtYWlsOiAoZW1haWw6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgaXNFbWFpbFZlcmlmaWVkOiBib29sZWFuO1xuICBpc01hc3RlclVzZXI6IGJvb2xlYW47XG4gIGhhc0FjdGl2ZVN1YnNjcmlwdGlvbjogYm9vbGVhbjtcbiAgY2FuUHJhY3RpY2U6IGJvb2xlYW47XG4gIHByYWN0aWNlQ291bnQ6IG51bWJlcjtcbiAgbWF4UHJhY3RpY2VDb3VudDogbnVtYmVyO1xuICBpbmNyZW1lbnRQcmFjdGljZUNvdW50OiAoKSA9PiB2b2lkO1xuICBjYW5Vc2VTdGFja1NpemU6IChzdGFja1NpemU6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgZ2V0QWxsb3dlZFN0YWNrU2l6ZXM6ICgpID0+IHN0cmluZ1tdO1xufVxuXG5jb25zdCBBdXRoQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8QXV0aENvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG5leHBvcnQgY29uc3QgdXNlQXV0aCA9ICgpID0+IHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoQXV0aENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VBdXRoIG11c3QgYmUgdXNlZCB3aXRoaW4gYW4gQXV0aFByb3ZpZGVyJyk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG4vLyDjg57jgrnjgr/jg7zjg6bjg7zjgrbjg7zjga7jg6Hjg7zjg6vjgqLjg4njg6zjgrnjg6rjgrnjg4hcbmNvbnN0IE1BU1RFUl9VU0VSX0VNQUlMUyA9IFtcbiAgJ2FkbWluQGd0b3ZhbnRhZ2UuY29tJyxcbiAgJ21hc3RlckBndG92YW50YWdlLmNvbSdcbl07XG5cbi8vIOODnuOCueOCv+ODvOOCouOCq+OCpuODs+ODiOOBruWIneacn+ODkeOCueODr+ODvOODie+8iOacrOeVqueSsOWig+OBp+OBr+WkieabtOOBjOW/heimge+8iVxuY29uc3QgTUFTVEVSX1BBU1NXT1JEID0gJ21hc3RlcjEyMzQ1Nic7XG5cbi8vIOewoeWNmOOBquODj+ODg+OCt+ODpemWouaVsO+8iOacrOeVqueSsOWig+OBp+OBr2JjcnlwdOetieOCkuS9v+eUqO+8iVxuY29uc3Qgc2ltcGxlSGFzaCA9IChzdHI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGxldCBoYXNoID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hhcjtcbiAgICBoYXNoID0gaGFzaCAmIGhhc2g7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBoYXNoLnRvU3RyaW5nKCk7XG59O1xuXG4vLyDjg6Hjg7zjg6vnorroqo3jg4jjg7zjgq/jg7PjgpLnlJ/miJDjgZnjgovplqLmlbBcbmNvbnN0IGdlbmVyYXRlVmVyaWZpY2F0aW9uVG9rZW4gPSAoKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSkgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpO1xufTtcblxuLy8g44Oe44K544K/44O844Ki44Kr44Km44Oz44OI44KS5Yid5pyf5YyW44GZ44KL6Zai5pWwXG5jb25zdCBpbml0aWFsaXplTWFzdGVyQWNjb3VudHMgPSAoKSA9PiB7XG4gIGNvbnN0IHVzZXJzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcnMnKSB8fCAnW10nKTtcbiAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcblxuICBNQVNURVJfVVNFUl9FTUFJTFMuZm9yRWFjaChlbWFpbCA9PiB7XG4gICAgY29uc3QgZXhpc3RpbmdVc2VyID0gdXNlcnMuZmluZCgodTogYW55KSA9PiB1LmVtYWlsID09PSBlbWFpbCk7XG4gICAgaWYgKCFleGlzdGluZ1VzZXIpIHtcbiAgICAgIGNvbnN0IG1hc3RlclVzZXIgPSB7XG4gICAgICAgIGlkOiBgbWFzdGVyLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpfWAsXG4gICAgICAgIGVtYWlsLFxuICAgICAgICBuYW1lOiBlbWFpbCA9PT0gJ21hc3RlckBndG92YW50YWdlLmNvbScgPyAnTWFzdGVyIFVzZXInIDogJ0FkbWluIFVzZXInLFxuICAgICAgICBwYXNzd29yZDogc2ltcGxlSGFzaChNQVNURVJfUEFTU1dPUkQpLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgZW1haWxWZXJpZmllZDogdHJ1ZSxcbiAgICAgICAgaXNNYXN0ZXJVc2VyOiB0cnVlLFxuICAgICAgICBzdWJzY3JpcHRpb25TdGF0dXM6ICdtYXN0ZXInIGFzIGNvbnN0LFxuICAgICAgICBzdWJzY3JpcHRpb25FeHBpcmVzQXQ6IG5ldyBEYXRlKERhdGUubm93KCkgKyAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1ICogMTApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHByYWN0aWNlQ291bnQ6IDAsXG4gICAgICAgIGxhc3RQcmFjdGljZURhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfTtcbiAgICAgIHVzZXJzLnB1c2gobWFzdGVyVXNlcik7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUubG9nKGDjg57jgrnjgr/jg7zjgqLjgqvjgqbjg7Pjg4jjgpLkvZzmiJDjgZfjgb7jgZfjgZ86ICR7ZW1haWx9YCk7XG4gICAgfVxuICB9KTtcblxuICBpZiAodXBkYXRlZCkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBBdXRoUHJvdmlkZXI6IFJlYWN0LkZDPHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9PiA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgW3VzZXIsIHNldFVzZXJdID0gdXNlU3RhdGU8VXNlciB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgLy8g5Yid5pyf5YyW5pmC44Gr44Oe44K544K/44O844Ki44Kr44Km44Oz44OI44KS56K66KqN44O75L2c5oiQXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaW5pdGlhbGl6ZU1hc3RlckFjY291bnRzKCk7XG4gICAgXG4gICAgY29uc3Qgc2F2ZWRVc2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2d0by12YW50YWdlLXVzZXInKTtcbiAgICBpZiAoc2F2ZWRVc2VyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXJzZWRVc2VyID0gSlNPTi5wYXJzZShzYXZlZFVzZXIpO1xuICAgICAgICAvLyDlj6TjgYTjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7loLTlkIjjga/mlrDjgZfjgYTlvaLlvI/jgavlpInmj5tcbiAgICAgICAgY29uc3QgdXBkYXRlZFVzZXI6IFVzZXIgPSB7XG4gICAgICAgICAgLi4ucGFyc2VkVXNlcixcbiAgICAgICAgICBlbWFpbFZlcmlmaWVkOiBwYXJzZWRVc2VyLmVtYWlsVmVyaWZpZWQgPz8gZmFsc2UsXG4gICAgICAgICAgaXNNYXN0ZXJVc2VyOiBwYXJzZWRVc2VyLmlzTWFzdGVyVXNlciA/PyBNQVNURVJfVVNFUl9FTUFJTFMuaW5jbHVkZXMocGFyc2VkVXNlci5lbWFpbCksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uU3RhdHVzOiBwYXJzZWRVc2VyLnN1YnNjcmlwdGlvblN0YXR1cyA/PyAnZnJlZScsXG4gICAgICAgICAgc3Vic2NyaXB0aW9uRXhwaXJlc0F0OiBwYXJzZWRVc2VyLnN1YnNjcmlwdGlvbkV4cGlyZXNBdFxuICAgICAgICB9O1xuICAgICAgICBzZXRVc2VyKHVwZGF0ZWRVc2VyKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2d0by12YW50YWdlLXVzZXInLCBKU09OLnN0cmluZ2lmeSh1cGRhdGVkVXNlcikpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHBhcnNlIHNhdmVkIHVzZXI6JywgZXJyb3IpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcicpO1xuICAgICAgfVxuICAgIH1cbiAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgLy8g44Om44O844K244O844GM6Kit5a6a44GV44KM44Gf5b6M44Gr57e057+S5Zue5pWw44KS44Oq44K744OD44OIXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHVzZXIpIHtcbiAgICAgIHJlc2V0UHJhY3RpY2VDb3VudElmTmV3RGF5KCk7XG4gICAgfVxuICB9LCBbdXNlciwgcmVzZXRQcmFjdGljZUNvdW50SWZOZXdEYXldKTtcblxuICBjb25zdCByZWdpc3RlciA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8g5pei5a2Y44Om44O844K244O844Gu44OB44Kn44OD44KvXG4gICAgICBjb25zdCBleGlzdGluZ1VzZXJzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcnMnKSB8fCAnW10nKTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IGV4aXN0aW5nVXNlcnMuZmluZCgodTogYW55KSA9PiB1LmVtYWlsID09PSBlbWFpbCk7XG4gICAgICBcbiAgICAgIGlmIChleGlzdGluZ1VzZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfjgZPjga7jg6Hjg7zjg6vjgqLjg4njg6zjgrnjga/ml6LjgavnmbvpjLLjgZXjgozjgabjgYTjgb7jgZknKTtcbiAgICAgIH1cblxuICAgICAgLy8g44Oe44K544K/44O844Om44O844K244O844GL44Gp44GG44GL44KS44OB44Kn44OD44KvXG4gICAgICBjb25zdCBpc01hc3RlclVzZXIgPSBNQVNURVJfVVNFUl9FTUFJTFMuaW5jbHVkZXMoZW1haWwpO1xuICAgICAgY29uc3QgdmVyaWZpY2F0aW9uVG9rZW4gPSBnZW5lcmF0ZVZlcmlmaWNhdGlvblRva2VuKCk7XG5cbiAgICAgIGNvbnN0IG5ld1VzZXIgPSB7XG4gICAgICAgIGlkOiBgdXNlci0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKX1gLFxuICAgICAgICBlbWFpbCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgcGFzc3dvcmQ6IHNpbXBsZUhhc2gocGFzc3dvcmQpLCAvLyDjg5Hjgrnjg6/jg7zjg4njgpLjg4/jg4Pjgrfjg6XljJZcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGVtYWlsVmVyaWZpZWQ6IGlzTWFzdGVyVXNlciwgLy8g44Oe44K544K/44O844Om44O844K244O844Gv6Ieq5YuV55qE44Gr44Oh44O844Or56K66KqN5riI44G/XG4gICAgICAgIHZlcmlmaWNhdGlvblRva2VuOiBpc01hc3RlclVzZXIgPyB1bmRlZmluZWQgOiB2ZXJpZmljYXRpb25Ub2tlbixcbiAgICAgICAgaXNNYXN0ZXJVc2VyLFxuICAgICAgICBzdWJzY3JpcHRpb25TdGF0dXM6IGlzTWFzdGVyVXNlciA/ICdtYXN0ZXInIGFzIGNvbnN0IDogJ2ZyZWUnIGFzIGNvbnN0LFxuICAgICAgICBzdWJzY3JpcHRpb25FeHBpcmVzQXQ6IGlzTWFzdGVyVXNlciBcbiAgICAgICAgICA/IG5ldyBEYXRlKERhdGUubm93KCkgKyAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1ICogMTApLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJhY3RpY2VDb3VudDogMCxcbiAgICAgICAgbGFzdFByYWN0aWNlRGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9O1xuXG4gICAgICBleGlzdGluZ1VzZXJzLnB1c2gobmV3VXNlcik7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcnMnLCBKU09OLnN0cmluZ2lmeShleGlzdGluZ1VzZXJzKSk7XG5cbiAgICAgIC8vIOODnuOCueOCv+ODvOODpuODvOOCtuODvOOBp+OBquOBhOWgtOWQiOOBr+ODoeODvOODq+eiuuiqjeOCkumAgeS/oVxuICAgICAgaWYgKCFpc01hc3RlclVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2F1dGgvc2VuZC12ZXJpZmljYXRpb24tZW1haWwnLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgICB0b2tlbjogdmVyaWZpY2F0aW9uVG9rZW4sXG4gICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNlbmQgdmVyaWZpY2F0aW9uIGVtYWlsJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdWZXJpZmljYXRpb24gZW1haWwgc2VudCBzdWNjZXNzZnVsbHkgdG86JywgZW1haWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZW5kaW5nIHZlcmlmaWNhdGlvbiBlbWFpbDonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBwYXNzd29yZDogXywgLi4udXNlcldpdGhvdXRQYXNzd29yZCB9ID0gbmV3VXNlcjtcbiAgICAgIHNldFVzZXIodXNlcldpdGhvdXRQYXNzd29yZCk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcicsIEpTT04uc3RyaW5naWZ5KHVzZXJXaXRob3V0UGFzc3dvcmQpKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlZ2lzdHJhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGxvZ2luID0gYXN5bmMgKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycpIHx8ICdbXScpO1xuICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBzaW1wbGVIYXNoKHBhc3N3b3JkKTtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2Vycy5maW5kKCh1OiBhbnkpID0+IHUuZW1haWwgPT09IGVtYWlsICYmIHUucGFzc3dvcmQgPT09IGhhc2hlZFBhc3N3b3JkKTtcbiAgICAgIFxuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcign44Oh44O844Or44Ki44OJ44Os44K544G+44Gf44Gv44OR44K544Ov44O844OJ44GM5q2j44GX44GP44GC44KK44G+44Gb44KTJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgcGFzc3dvcmQ6IF8sIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA9IHVzZXI7XG4gICAgICBcbiAgICAgIC8vIOODnuOCueOCv+ODvOODpuODvOOCtuODvOOBruWgtOWQiOOBr+iHquWLleeahOOBq+ODoeODvOODq+eiuuiqjea4iOOBv+OBq+OBmeOCi1xuICAgICAgaWYgKE1BU1RFUl9VU0VSX0VNQUlMUy5pbmNsdWRlcyhlbWFpbCkgJiYgIXVzZXJXaXRob3V0UGFzc3dvcmQuZW1haWxWZXJpZmllZCkge1xuICAgICAgICB1c2VyV2l0aG91dFBhc3N3b3JkLmVtYWlsVmVyaWZpZWQgPSB0cnVlO1xuICAgICAgICB1c2VyV2l0aG91dFBhc3N3b3JkLmlzTWFzdGVyVXNlciA9IHRydWU7XG4gICAgICAgIHVzZXJXaXRob3V0UGFzc3dvcmQuc3Vic2NyaXB0aW9uU3RhdHVzID0gJ21hc3Rlcic7XG4gICAgICAgIHVzZXJXaXRob3V0UGFzc3dvcmQuc3Vic2NyaXB0aW9uRXhwaXJlc0F0ID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDEwMDAgKiA2MCAqIDYwICogMjQgKiAzNjUgKiAxMCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIOODpuODvOOCtuODvOODquOCueODiOOCkuabtOaWsFxuICAgICAgICBjb25zdCB1cGRhdGVkVXNlcnMgPSB1c2Vycy5tYXAoKHU6IGFueSkgPT4gXG4gICAgICAgICAgdS5lbWFpbCA9PT0gZW1haWwgPyB7IC4uLnUsIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA6IHVcbiAgICAgICAgKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2d0by12YW50YWdlLXVzZXJzJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFVzZXJzKSk7XG4gICAgICB9XG5cbiAgICAgIHNldFVzZXIodXNlcldpdGhvdXRQYXNzd29yZCk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcicsIEpTT04uc3RyaW5naWZ5KHVzZXJXaXRob3V0UGFzc3dvcmQpKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ2luIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGxvZ291dCA9ICgpID0+IHtcbiAgICBzZXRVc2VyKG51bGwpO1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdndG8tdmFudGFnZS11c2VyJyk7XG4gIH07XG5cbiAgY29uc3QgdmVyaWZ5RW1haWwgPSBhc3luYyAodG9rZW46IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXVzZXIpIHJldHVybiBmYWxzZTtcblxuICAgICAgY29uc3QgdXNlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycpIHx8ICdbXScpO1xuICAgICAgY29uc3QgdXNlckluZGV4ID0gdXNlcnMuZmluZEluZGV4KCh1OiBhbnkpID0+IHUuZW1haWwgPT09IHVzZXIuZW1haWwpO1xuICAgICAgXG4gICAgICBpZiAodXNlckluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHVzZXJzW3VzZXJJbmRleF07XG4gICAgICBpZiAoY3VycmVudFVzZXIudmVyaWZpY2F0aW9uVG9rZW4gIT09IHRva2VuKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIC8vIOODoeODvOODq+eiuuiqjeOCkuWujOS6hlxuICAgICAgY29uc3QgdXBkYXRlZFVzZXI6IFVzZXIgPSB7XG4gICAgICAgIC4uLnVzZXIsXG4gICAgICAgIGVtYWlsVmVyaWZpZWQ6IHRydWUsXG4gICAgICAgIHZlcmlmaWNhdGlvblRva2VuOiB1bmRlZmluZWRcbiAgICAgIH07XG5cbiAgICAgIC8vIOODpuODvOOCtuODvOODquOCueODiOOCkuabtOaWsFxuICAgICAgdXNlcnNbdXNlckluZGV4XSA9IHsgLi4uY3VycmVudFVzZXIsIGVtYWlsVmVyaWZpZWQ6IHRydWUsIHZlcmlmaWNhdGlvblRva2VuOiB1bmRlZmluZWQgfTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSk7XG5cbiAgICAgIC8vIOePvuWcqOOBruODpuODvOOCtuODvOOCkuabtOaWsFxuICAgICAgc2V0VXNlcih1cGRhdGVkVXNlcik7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcicsIEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRVc2VyKSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFbWFpbCB2ZXJpZmljYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmVzZW5kVmVyaWZpY2F0aW9uRW1haWwgPSBhc3luYyAoZW1haWw6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2d0by12YW50YWdlLXVzZXJzJykgfHwgJ1tdJyk7XG4gICAgICBjb25zdCB1c2VySW5kZXggPSB1c2Vycy5maW5kSW5kZXgoKHU6IGFueSkgPT4gdS5lbWFpbCA9PT0gZW1haWwpO1xuICAgICAgXG4gICAgICBpZiAodXNlckluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBjb25zdCBuZXdUb2tlbiA9IGdlbmVyYXRlVmVyaWZpY2F0aW9uVG9rZW4oKTtcbiAgICAgIHVzZXJzW3VzZXJJbmRleF0udmVyaWZpY2F0aW9uVG9rZW4gPSBuZXdUb2tlbjtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSk7XG5cbiAgICAgIC8vIOePvuWcqOOBruODpuODvOOCtuODvOOCguabtOaWsFxuICAgICAgaWYgKHVzZXIgJiYgdXNlci5lbWFpbCA9PT0gZW1haWwpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSB7IC4uLnVzZXIsIHZlcmlmaWNhdGlvblRva2VuOiBuZXdUb2tlbiB9O1xuICAgICAgICBzZXRVc2VyKHVwZGF0ZWRVc2VyKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2d0by12YW50YWdlLXVzZXInLCBKU09OLnN0cmluZ2lmeSh1cGRhdGVkVXNlcikpO1xuICAgICAgfVxuXG4gICAgICAvLyDjg6Hjg7zjg6vnorroqo3jg6Hjg7zjg6vjgpLlho3pgIHkv6FcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvYXV0aC9zZW5kLXZlcmlmaWNhdGlvbi1lbWFpbCcsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICB0b2tlbjogbmV3VG9rZW4sXG4gICAgICAgICAgICBuYW1lOiB1c2Vyc1t1c2VySW5kZXhdLm5hbWVcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZXNlbmQgdmVyaWZpY2F0aW9uIGVtYWlsJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdWZXJpZmljYXRpb24gZW1haWwgcmVzZW50IHN1Y2Nlc3NmdWxseSB0bzonLCBlbWFpbCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlc2VuZGluZyB2ZXJpZmljYXRpb24gZW1haWw6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1Jlc2VuZCB2ZXJpZmljYXRpb24gZW1haWwgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLy8g57e057+S5Zue5pWw566h55CGXG4gIGNvbnN0IGdldE1heFByYWN0aWNlQ291bnQgPSAoc3Vic2NyaXB0aW9uU3RhdHVzOiBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICAgIHN3aXRjaCAoc3Vic2NyaXB0aW9uU3RhdHVzKSB7XG4gICAgICBjYXNlICdmcmVlJzogcmV0dXJuIDU7XG4gICAgICBjYXNlICdsaWdodCc6IHJldHVybiA1MDtcbiAgICAgIGNhc2UgJ3ByZW1pdW0nOlxuICAgICAgY2FzZSAnbWFzdGVyJzogcmV0dXJuIEluZmluaXR5O1xuICAgICAgZGVmYXVsdDogcmV0dXJuIDU7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJlc2V0UHJhY3RpY2VDb3VudElmTmV3RGF5ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghdXNlcikgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKS50b0RhdGVTdHJpbmcoKTtcbiAgICBjb25zdCBsYXN0UHJhY3RpY2VEYXRlID0gdXNlci5sYXN0UHJhY3RpY2VEYXRlID8gbmV3IERhdGUodXNlci5sYXN0UHJhY3RpY2VEYXRlKS50b0RhdGVTdHJpbmcoKSA6IG51bGw7XG4gICAgXG4gICAgaWYgKGxhc3RQcmFjdGljZURhdGUgIT09IHRvZGF5KSB7XG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IHsgLi4udXNlciwgcHJhY3RpY2VDb3VudDogMCwgbGFzdFByYWN0aWNlRGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH07XG4gICAgICBzZXRVc2VyKHVwZGF0ZWRVc2VyKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VyJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFVzZXIpKTtcbiAgICAgIFxuICAgICAgLy8g44Om44O844K244O844Oq44K544OI44KC5pu05pawXG4gICAgICBjb25zdCB1c2VycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2d0by12YW50YWdlLXVzZXJzJykgfHwgJ1tdJyk7XG4gICAgICBjb25zdCB1c2VySW5kZXggPSB1c2Vycy5maW5kSW5kZXgoKHU6IGFueSkgPT4gdS5lbWFpbCA9PT0gdXNlci5lbWFpbCk7XG4gICAgICBpZiAodXNlckluZGV4ICE9PSAtMSkge1xuICAgICAgICB1c2Vyc1t1c2VySW5kZXhdID0gdXBkYXRlZFVzZXI7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbdXNlcl0pO1xuXG4gIGNvbnN0IGluY3JlbWVudFByYWN0aWNlQ291bnQgPSAoKSA9PiB7XG4gICAgaWYgKCF1c2VyKSByZXR1cm47XG4gICAgXG4gICAgcmVzZXRQcmFjdGljZUNvdW50SWZOZXdEYXkoKTtcbiAgICBcbiAgICBjb25zdCBjdXJyZW50Q291bnQgPSB1c2VyLnByYWN0aWNlQ291bnQgfHwgMDtcbiAgICBjb25zdCB1cGRhdGVkVXNlciA9IHsgLi4udXNlciwgcHJhY3RpY2VDb3VudDogY3VycmVudENvdW50ICsgMSB9O1xuICAgIHNldFVzZXIodXBkYXRlZFVzZXIpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdndG8tdmFudGFnZS11c2VyJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFVzZXIpKTtcbiAgICBcbiAgICAvLyDjg6bjg7zjgrbjg7zjg6rjgrnjg4jjgoLmm7TmlrBcbiAgICBjb25zdCB1c2VycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2d0by12YW50YWdlLXVzZXJzJykgfHwgJ1tdJyk7XG4gICAgY29uc3QgdXNlckluZGV4ID0gdXNlcnMuZmluZEluZGV4KCh1OiBhbnkpID0+IHUuZW1haWwgPT09IHVzZXIuZW1haWwpO1xuICAgIGlmICh1c2VySW5kZXggIT09IC0xKSB7XG4gICAgICB1c2Vyc1t1c2VySW5kZXhdID0gdXBkYXRlZFVzZXI7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ3RvLXZhbnRhZ2UtdXNlcnMnLCBKU09OLnN0cmluZ2lmeSh1c2VycykpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBpc0F1dGhlbnRpY2F0ZWQgPSAhIXVzZXI7XG4gIGNvbnN0IGlzRW1haWxWZXJpZmllZCA9IEJvb2xlYW4odXNlcj8uZW1haWxWZXJpZmllZCk7XG4gIGNvbnN0IGlzTWFzdGVyVXNlciA9IEJvb2xlYW4odXNlcj8uaXNNYXN0ZXJVc2VyKTtcbiAgY29uc3QgaGFzQWN0aXZlU3Vic2NyaXB0aW9uID0gdXNlcj8uc3Vic2NyaXB0aW9uU3RhdHVzID09PSAncHJlbWl1bScgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcj8uc3Vic2NyaXB0aW9uU3RhdHVzID09PSAnbWFzdGVyJyB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHVzZXI/LnN1YnNjcmlwdGlvbkV4cGlyZXNBdCAmJiBuZXcgRGF0ZSh1c2VyLnN1YnNjcmlwdGlvbkV4cGlyZXNBdCkgPiBuZXcgRGF0ZSgpKTtcblxuICAvLyDnt7Tnv5LliLbpmZDjg4Hjgqfjg4Pjgq9cbiAgY29uc3QgbWF4UHJhY3RpY2VDb3VudCA9IGdldE1heFByYWN0aWNlQ291bnQodXNlcj8uc3Vic2NyaXB0aW9uU3RhdHVzIHx8ICdmcmVlJyk7XG4gIGNvbnN0IHByYWN0aWNlQ291bnQgPSB1c2VyPy5wcmFjdGljZUNvdW50IHx8IDA7XG4gIGNvbnN0IGNhblByYWN0aWNlID0gdXNlcj8uc3Vic2NyaXB0aW9uU3RhdHVzID09PSAncHJlbWl1bScgfHwgXG4gICAgICAgICAgICAgICAgICAgICB1c2VyPy5zdWJzY3JpcHRpb25TdGF0dXMgPT09ICdtYXN0ZXInIHx8IFxuICAgICAgICAgICAgICAgICAgICAgcHJhY3RpY2VDb3VudCA8IG1heFByYWN0aWNlQ291bnQ7XG5cbiAgLy8g44K544K/44OD44Kv44K144Kk44K65Yi26ZmQ5qmf6IO9XG4gIGNvbnN0IGNhblVzZVN0YWNrU2l6ZSA9IChzdGFja1NpemU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvblN0YXR1cyA9IHVzZXI/LnN1YnNjcmlwdGlvblN0YXR1cyB8fCAnZnJlZSc7XG4gICAgaWYgKHN1YnNjcmlwdGlvblN0YXR1cyA9PT0gJ3ByZW1pdW0nIHx8IHN1YnNjcmlwdGlvblN0YXR1cyA9PT0gJ21hc3RlcicpIHtcbiAgICAgIHJldHVybiB0cnVlOyAvLyDjg5fjg6zjg5/jgqLjg6Djg7vjg57jgrnjgr/jg7zjga/lhajjgrnjgr/jg4Pjgq/jgrXjgqTjgrrkvb/nlKjlj6/og71cbiAgICB9XG4gICAgaWYgKHN1YnNjcmlwdGlvblN0YXR1cyA9PT0gJ2xpZ2h0Jykge1xuICAgICAgcmV0dXJuIHRydWU7IC8vIOODqeOCpOODiOODl+ODqeODs+OCguWFqOOCueOCv+ODg+OCr+OCteOCpOOCuuS9v+eUqOWPr+iDvVxuICAgIH1cbiAgICAvLyDnhKHmlpnjg5fjg6njg7Pjga8zMEJC44Gu44G/XG4gICAgcmV0dXJuIHN0YWNrU2l6ZSA9PT0gJzMwQkInO1xuICB9O1xuXG4gIGNvbnN0IGdldEFsbG93ZWRTdGFja1NpemVzID0gKCk6IHN0cmluZ1tdID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25TdGF0dXMgPSB1c2VyPy5zdWJzY3JpcHRpb25TdGF0dXMgfHwgJ2ZyZWUnO1xuICAgIGlmIChzdWJzY3JpcHRpb25TdGF0dXMgPT09ICdwcmVtaXVtJyB8fCBzdWJzY3JpcHRpb25TdGF0dXMgPT09ICdtYXN0ZXInIHx8IHN1YnNjcmlwdGlvblN0YXR1cyA9PT0gJ2xpZ2h0Jykge1xuICAgICAgcmV0dXJuIFsnMTBCQicsICcxNUJCJywgJzIwQkInLCAnMzBCQicsICc0MEJCJywgJzUwQkInLCAnNzVCQiddOyAvLyDlhajjgrnjgr/jg4Pjgq/jgrXjgqTjgrpcbiAgICB9XG4gICAgcmV0dXJuIFsnMzBCQiddOyAvLyDnhKHmlpnjg5fjg6njg7Pjga8zMEJC44Gu44G/XG4gIH07XG5cbiAgY29uc3QgdmFsdWU6IEF1dGhDb250ZXh0VHlwZSA9IHtcbiAgICB1c2VyLFxuICAgIGlzTG9hZGluZyxcbiAgICByZWdpc3RlcixcbiAgICBsb2dpbixcbiAgICBsb2dvdXQsXG4gICAgaXNBdXRoZW50aWNhdGVkLFxuICAgIHZlcmlmeUVtYWlsLFxuICAgIHJlc2VuZFZlcmlmaWNhdGlvbkVtYWlsLFxuICAgIGlzRW1haWxWZXJpZmllZCxcbiAgICBpc01hc3RlclVzZXIsXG4gICAgaGFzQWN0aXZlU3Vic2NyaXB0aW9uLFxuICAgIGNhblByYWN0aWNlLFxuICAgIHByYWN0aWNlQ291bnQsXG4gICAgbWF4UHJhY3RpY2VDb3VudCxcbiAgICBpbmNyZW1lbnRQcmFjdGljZUNvdW50LFxuICAgIGNhblVzZVN0YWNrU2l6ZSxcbiAgICBnZXRBbGxvd2VkU3RhY2tTaXplc1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEF1dGhDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9BdXRoQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07ICJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VDYWxsYmFjayIsIkF1dGhDb250ZXh0IiwidW5kZWZpbmVkIiwidXNlQXV0aCIsImNvbnRleHQiLCJFcnJvciIsIk1BU1RFUl9VU0VSX0VNQUlMUyIsIk1BU1RFUl9QQVNTV09SRCIsInNpbXBsZUhhc2giLCJzdHIiLCJoYXNoIiwiaSIsImxlbmd0aCIsImNoYXIiLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciLCJnZW5lcmF0ZVZlcmlmaWNhdGlvblRva2VuIiwiTWF0aCIsInJhbmRvbSIsInN1YnN0cmluZyIsImluaXRpYWxpemVNYXN0ZXJBY2NvdW50cyIsInVzZXJzIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInVwZGF0ZWQiLCJmb3JFYWNoIiwiZW1haWwiLCJleGlzdGluZ1VzZXIiLCJmaW5kIiwidSIsIm1hc3RlclVzZXIiLCJpZCIsIkRhdGUiLCJub3ciLCJuYW1lIiwicGFzc3dvcmQiLCJjcmVhdGVkQXQiLCJ0b0lTT1N0cmluZyIsImVtYWlsVmVyaWZpZWQiLCJpc01hc3RlclVzZXIiLCJzdWJzY3JpcHRpb25TdGF0dXMiLCJzdWJzY3JpcHRpb25FeHBpcmVzQXQiLCJwcmFjdGljZUNvdW50IiwibGFzdFByYWN0aWNlRGF0ZSIsInB1c2giLCJjb25zb2xlIiwibG9nIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsIkF1dGhQcm92aWRlciIsImNoaWxkcmVuIiwidXNlciIsInNldFVzZXIiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJzYXZlZFVzZXIiLCJwYXJzZWRVc2VyIiwidXBkYXRlZFVzZXIiLCJpbmNsdWRlcyIsImVycm9yIiwicmVtb3ZlSXRlbSIsInJlc2V0UHJhY3RpY2VDb3VudElmTmV3RGF5IiwicmVnaXN0ZXIiLCJleGlzdGluZ1VzZXJzIiwidmVyaWZpY2F0aW9uVG9rZW4iLCJuZXdVc2VyIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwidG9rZW4iLCJvayIsIl8iLCJ1c2VyV2l0aG91dFBhc3N3b3JkIiwibG9naW4iLCJoYXNoZWRQYXNzd29yZCIsInVwZGF0ZWRVc2VycyIsIm1hcCIsImxvZ291dCIsInZlcmlmeUVtYWlsIiwidXNlckluZGV4IiwiZmluZEluZGV4IiwiY3VycmVudFVzZXIiLCJyZXNlbmRWZXJpZmljYXRpb25FbWFpbCIsIm5ld1Rva2VuIiwiZ2V0TWF4UHJhY3RpY2VDb3VudCIsIkluZmluaXR5IiwidG9kYXkiLCJ0b0RhdGVTdHJpbmciLCJpbmNyZW1lbnRQcmFjdGljZUNvdW50IiwiY3VycmVudENvdW50IiwiaXNBdXRoZW50aWNhdGVkIiwiaXNFbWFpbFZlcmlmaWVkIiwiQm9vbGVhbiIsImhhc0FjdGl2ZVN1YnNjcmlwdGlvbiIsIm1heFByYWN0aWNlQ291bnQiLCJjYW5QcmFjdGljZSIsImNhblVzZVN0YWNrU2l6ZSIsInN0YWNrU2l6ZSIsImdldEFsbG93ZWRTdGFja1NpemVzIiwidmFsdWUiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/AuthContext.tsx\n"));

/***/ })

});