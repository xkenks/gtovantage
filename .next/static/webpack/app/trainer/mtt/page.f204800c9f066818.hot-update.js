"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/trainer/mtt/page",{

/***/ "(app-pages-browser)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ useAuth,AuthProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useAuth = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// マスターユーザーのメールアドレスリスト\nconst MASTER_USER_EMAILS = [\n    \"admin@gtovantage.com\",\n    \"master@gtovantage.com\"\n];\n// マスターアカウントの初期パスワード（本番環境では変更が必要）\nconst MASTER_PASSWORD = \"master123456\";\n// 簡単なハッシュ関数（本番環境ではbcrypt等を使用）\nconst simpleHash = (str)=>{\n    let hash = 0;\n    for(let i = 0; i < str.length; i++){\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString();\n};\n// メール確認トークンを生成する関数\nconst generateVerificationToken = ()=>{\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\n// マスターアカウントを初期化する関数\nconst initializeMasterAccounts = ()=>{\n    const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n    let updated = false;\n    MASTER_USER_EMAILS.forEach((email)=>{\n        const existingUser = users.find((u)=>u.email === email);\n        if (!existingUser) {\n            const masterUser = {\n                id: \"master-\".concat(Date.now(), \"-\").concat(Math.random()),\n                email,\n                name: email === \"master@gtovantage.com\" ? \"Master User\" : \"Admin User\",\n                password: simpleHash(MASTER_PASSWORD),\n                createdAt: new Date().toISOString(),\n                emailVerified: true,\n                isMasterUser: true,\n                subscriptionStatus: \"master\",\n                subscriptionExpiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).toISOString(),\n                practiceCount: 0,\n                lastPracticeDate: new Date().toISOString()\n            };\n            users.push(masterUser);\n            updated = true;\n            console.log(\"マスターアカウントを作成しました: \".concat(email));\n        }\n    });\n    if (updated) {\n        localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n    }\n};\nconst AuthProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // 練習回数をリセットする関数\n    const resetPracticeCountIfNewDay = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!user) return;\n        const today = new Date().toDateString();\n        const lastPracticeDate = user.lastPracticeDate ? new Date(user.lastPracticeDate).toDateString() : null;\n        if (lastPracticeDate !== today) {\n            const updatedUser = {\n                ...user,\n                practiceCount: 0,\n                lastPracticeDate: new Date().toISOString()\n            };\n            setUser(updatedUser);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            // ユーザーリストも更新\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const userIndex = users.findIndex((u)=>u.email === user.email);\n            if (userIndex !== -1) {\n                users[userIndex] = updatedUser;\n                localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n            }\n        }\n    }, [\n        user\n    ]);\n    // 初期化時にマスターアカウントを確認・作成\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        initializeMasterAccounts();\n        const savedUser = localStorage.getItem(\"gto-vantage-user\");\n        if (savedUser) {\n            try {\n                const parsedUser = JSON.parse(savedUser);\n                var _parsedUser_emailVerified, _parsedUser_isMasterUser, _parsedUser_subscriptionStatus;\n                // 古いユーザーデータの場合は新しい形式に変換\n                const updatedUser = {\n                    ...parsedUser,\n                    emailVerified: (_parsedUser_emailVerified = parsedUser.emailVerified) !== null && _parsedUser_emailVerified !== void 0 ? _parsedUser_emailVerified : false,\n                    isMasterUser: (_parsedUser_isMasterUser = parsedUser.isMasterUser) !== null && _parsedUser_isMasterUser !== void 0 ? _parsedUser_isMasterUser : MASTER_USER_EMAILS.includes(parsedUser.email),\n                    subscriptionStatus: (_parsedUser_subscriptionStatus = parsedUser.subscriptionStatus) !== null && _parsedUser_subscriptionStatus !== void 0 ? _parsedUser_subscriptionStatus : \"free\",\n                    subscriptionExpiresAt: parsedUser.subscriptionExpiresAt\n                };\n                setUser(updatedUser);\n                localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            } catch (error) {\n                console.error(\"Failed to parse saved user:\", error);\n                localStorage.removeItem(\"gto-vantage-user\");\n            }\n        }\n        setIsLoading(false);\n    }, []);\n    // ユーザーが設定された後に練習回数をリセット\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (user) {\n            resetPracticeCountIfNewDay();\n        }\n    }, [\n        user,\n        resetPracticeCountIfNewDay\n    ]);\n    const register = async (email, password, name)=>{\n        try {\n            // 既存ユーザーのチェック\n            const existingUsers = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const existingUser = existingUsers.find((u)=>u.email === email);\n            if (existingUser) {\n                throw new Error(\"このメールアドレスは既に登録されています\");\n            }\n            // マスターユーザーかどうかをチェック\n            const isMasterUser = MASTER_USER_EMAILS.includes(email);\n            const verificationToken = generateVerificationToken();\n            const newUser = {\n                id: \"user-\".concat(Date.now(), \"-\").concat(Math.random()),\n                email,\n                name,\n                password: simpleHash(password),\n                createdAt: new Date().toISOString(),\n                emailVerified: isMasterUser,\n                verificationToken: isMasterUser ? undefined : verificationToken,\n                isMasterUser,\n                subscriptionStatus: isMasterUser ? \"master\" : \"free\",\n                subscriptionExpiresAt: isMasterUser ? new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).toISOString() : undefined,\n                practiceCount: 0,\n                lastPracticeDate: new Date().toISOString()\n            };\n            existingUsers.push(newUser);\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(existingUsers));\n            // マスターユーザーでない場合はメール確認を送信\n            if (!isMasterUser) {\n                try {\n                    const response = await fetch(\"/api/auth/send-verification-email\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            email,\n                            token: verificationToken,\n                            name\n                        })\n                    });\n                    if (!response.ok) {\n                        console.error(\"Failed to send verification email\");\n                    } else {\n                        console.log(\"Verification email sent successfully to:\", email);\n                    }\n                } catch (error) {\n                    console.error(\"Error sending verification email:\", error);\n                }\n            }\n            const { password: _, ...userWithoutPassword } = newUser;\n            setUser(userWithoutPassword);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(userWithoutPassword));\n            return true;\n        } catch (error) {\n            console.error(\"Registration failed:\", error);\n            throw error;\n        }\n    };\n    const login = async (email, password)=>{\n        try {\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const hashedPassword = simpleHash(password);\n            const user = users.find((u)=>u.email === email && u.password === hashedPassword);\n            if (!user) {\n                throw new Error(\"メールアドレスまたはパスワードが正しくありません\");\n            }\n            const { password: _, ...userWithoutPassword } = user;\n            // マスターユーザーの場合は自動的にメール確認済みにする\n            if (MASTER_USER_EMAILS.includes(email) && !userWithoutPassword.emailVerified) {\n                userWithoutPassword.emailVerified = true;\n                userWithoutPassword.isMasterUser = true;\n                userWithoutPassword.subscriptionStatus = \"master\";\n                userWithoutPassword.subscriptionExpiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).toISOString();\n                // ユーザーリストを更新\n                const updatedUsers = users.map((u)=>u.email === email ? {\n                        ...u,\n                        ...userWithoutPassword\n                    } : u);\n                localStorage.setItem(\"gto-vantage-users\", JSON.stringify(updatedUsers));\n            }\n            setUser(userWithoutPassword);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(userWithoutPassword));\n            return true;\n        } catch (error) {\n            console.error(\"Login failed:\", error);\n            return false;\n        }\n    };\n    const logout = ()=>{\n        setUser(null);\n        localStorage.removeItem(\"gto-vantage-user\");\n    };\n    const verifyEmail = async (token)=>{\n        try {\n            if (!user) return false;\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const userIndex = users.findIndex((u)=>u.email === user.email);\n            if (userIndex === -1) return false;\n            const currentUser = users[userIndex];\n            if (currentUser.verificationToken !== token) return false;\n            // メール確認を完了\n            const updatedUser = {\n                ...user,\n                emailVerified: true,\n                verificationToken: undefined\n            };\n            // ユーザーリストを更新\n            users[userIndex] = {\n                ...currentUser,\n                emailVerified: true,\n                verificationToken: undefined\n            };\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n            // 現在のユーザーを更新\n            setUser(updatedUser);\n            localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            return true;\n        } catch (error) {\n            console.error(\"Email verification failed:\", error);\n            return false;\n        }\n    };\n    const resendVerificationEmail = async (email)=>{\n        try {\n            const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n            const userIndex = users.findIndex((u)=>u.email === email);\n            if (userIndex === -1) return false;\n            const newToken = generateVerificationToken();\n            users[userIndex].verificationToken = newToken;\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n            // 現在のユーザーも更新\n            if (user && user.email === email) {\n                const updatedUser = {\n                    ...user,\n                    verificationToken: newToken\n                };\n                setUser(updatedUser);\n                localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n            }\n            // メール確認メールを再送信\n            try {\n                const response = await fetch(\"/api/auth/send-verification-email\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        email,\n                        token: newToken,\n                        name: users[userIndex].name\n                    })\n                });\n                if (!response.ok) {\n                    console.error(\"Failed to resend verification email\");\n                    return false;\n                } else {\n                    console.log(\"Verification email resent successfully to:\", email);\n                    return true;\n                }\n            } catch (error) {\n                console.error(\"Error resending verification email:\", error);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Resend verification email failed:\", error);\n            return false;\n        }\n    };\n    const getMaxPracticeCount = (subscriptionStatus)=>{\n        switch(subscriptionStatus){\n            case \"free\":\n                return 20;\n            case \"light\":\n                return 200;\n            case \"premium\":\n            case \"master\":\n                return Infinity;\n            default:\n                return 20;\n        }\n    };\n    const incrementPracticeCount = ()=>{\n        if (!user) return;\n        resetPracticeCountIfNewDay();\n        const currentCount = user.practiceCount || 0;\n        const updatedUser = {\n            ...user,\n            practiceCount: currentCount + 1\n        };\n        setUser(updatedUser);\n        localStorage.setItem(\"gto-vantage-user\", JSON.stringify(updatedUser));\n        // ユーザーリストも更新\n        const users = JSON.parse(localStorage.getItem(\"gto-vantage-users\") || \"[]\");\n        const userIndex = users.findIndex((u)=>u.email === user.email);\n        if (userIndex !== -1) {\n            users[userIndex] = updatedUser;\n            localStorage.setItem(\"gto-vantage-users\", JSON.stringify(users));\n        }\n    };\n    const isAuthenticated = !!user;\n    const isEmailVerified = Boolean(user === null || user === void 0 ? void 0 : user.emailVerified);\n    const isMasterUser = Boolean(user === null || user === void 0 ? void 0 : user.isMasterUser);\n    const hasActiveSubscription = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"premium\" || (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"master\" || Boolean((user === null || user === void 0 ? void 0 : user.subscriptionExpiresAt) && new Date(user.subscriptionExpiresAt) > new Date());\n    // 練習制限チェック\n    const maxPracticeCount = getMaxPracticeCount((user === null || user === void 0 ? void 0 : user.subscriptionStatus) || \"free\");\n    const practiceCount = (user === null || user === void 0 ? void 0 : user.practiceCount) || 0;\n    const canPractice = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"premium\" || (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"master\" || (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"light\" && practiceCount < maxPracticeCount || (user === null || user === void 0 ? void 0 : user.subscriptionStatus) === \"free\" && practiceCount < maxPracticeCount;\n    // スタックサイズ制限機能\n    const canUseStackSize = (stackSize)=>{\n        const subscriptionStatus = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) || \"free\";\n        if (subscriptionStatus === \"premium\" || subscriptionStatus === \"master\") {\n            return true; // プレミアム・マスターは全スタックサイズ使用可能\n        }\n        if (subscriptionStatus === \"light\") {\n            return true; // ライトプランも全スタックサイズ使用可能\n        }\n        // 無料プランは30BBのみ\n        return stackSize === \"30BB\";\n    };\n    const getAllowedStackSizes = ()=>{\n        const subscriptionStatus = (user === null || user === void 0 ? void 0 : user.subscriptionStatus) || \"free\";\n        if (subscriptionStatus === \"premium\" || subscriptionStatus === \"master\" || subscriptionStatus === \"light\") {\n            return [\n                \"10BB\",\n                \"15BB\",\n                \"20BB\",\n                \"30BB\",\n                \"40BB\",\n                \"50BB\",\n                \"75BB\"\n            ]; // 全スタックサイズ\n        }\n        return [\n            \"30BB\"\n        ]; // 無料プランは30BBのみ\n    };\n    const value = {\n        user,\n        isLoading,\n        register,\n        login,\n        logout,\n        isAuthenticated,\n        verifyEmail,\n        resendVerificationEmail,\n        isEmailVerified,\n        isMasterUser,\n        hasActiveSubscription,\n        canPractice,\n        practiceCount,\n        maxPracticeCount,\n        incrementPracticeCount,\n        canUseStackSize,\n        getAllowedStackSizes\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/kensuke/Desktop/gtovantage/src/contexts/AuthContext.tsx\",\n        lineNumber: 446,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(AuthProvider, \"kdRBtv1+8uc6QpI/M9o3RqsEtoE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/AuthContext.tsx\n"));

/***/ })

});